{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green255\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green191\blue0;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf2 Time varying sounds\cf0 \
\
We have been making sounds so far that go on forever until we press a key to stop synthesising (sometimes they faded to silence, but were still running in the background after that!). \
\
Most of the time, we'll want to make sounds that go on for a limited time, and stop of their own accord. \
\
Listen to the difference between these two:\
\
\{\cf3 SinOsc\cf0 .ar(440,0,0.1)\}.scope						\cf4 //Sine Oscillator goes on forever\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\{\cf3 SinOsc\cf0 .ar(440,0,\cf3 Line\cf0 .kr(0.1,0.0,1.0))\}.scope	 	\cf4 //One second for the sine to disappear entirely\
\cf0 \
\
In the second example, I multiplied the sine wave by a line generator that started at 0.1 but went \
to zero over the course of a second.\
\
However, whilst the second sound fades out, both Synths hang around on the synthesis server unless you sent the stop command explicitly.   \
\
Compare (by watching your Synth count on the server graphic, for instance):\
\
\{\cf3 SinOsc\cf0 .ar(440,0,\cf3 Line\cf0 .kr(0.1,0,1,doneAction:2))\}.scope	 	\cf4 //doneAction:2 causes the Synth to be terminated once the line generator gets to the end of its line\
\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf5 Envelopes\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
In general, we want total control over how parameters of a sound (like volume or frequency) vary over time. \
This is often done by using envelopes. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4  //help files- [Env] [EnvGen]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Env\cf0 ([1,0,1],[1,1]).plot  \cf4 //This makes an Envelope with three control points, at y positions given by the first array, and separated in x by the values in the second (see the Env help file). The curve drawn out should actually look like a letter envelope!\cf0 \
\
The .plot gives a quick way of seeing the envelope. We won't need it for synthesis but it helps for you to see some envelope shapes.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //various types of envelope demonstrated:\cf0 \
			\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Env\cf0 ([0,1,0],[1.0,0.5]).plot  \cf4 //one second 0 to 1 then half a second 1 to 0\cf0 \
\
\cf3 Env\cf0 .linen(0.03,0.5,0.1).plot  \cf4 //linen has attackTime, sustainTime, releaseTime, level, curve\cf0 \
\
\cf3 Env\cf0 .adsr(0.01, 0.5, 0.5, 0.1, 1.0, 0).plot  \cf4 //attackTime, decayTime, sustainLevel, releaseTime,\
				peakLevel, curve\
//note that the sustain portion is not shown in time; this particular envelope type deals with variable hold times, and the hold is missed out in the plot\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
Here's another type of Envelope, good for making percussion sounds:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Env\cf0 .perc(0.05,0.5,1.0,0).plot \cf4 //arguments attackTime, releaseTime, level, curve: good for percussive hit envelopes\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
There are many more types of Envelope to discover and deploy\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
\
\
Let's start using Envelopes for synthesis. We use EnvGen to run the desired Envelope over time.\
\
This is the envelope we'll run:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Env\cf0 ([1,0],[1.0]).plot		\
\
The following just runs the Envelope: its too slow to hear any sounds (your ears only pick frequencies over 16-20Hz)\
\
\{\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([1,0],[1.0]))\}.scope\
\
This is multiplying a simple sine tone at 440Hz by the envelope over time, to make a limited duration sound\
\
\{\cf3 SinOsc\cf0 .ar(440,0,0.1)*\cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 ([1,0],[1.0]))\}.scope\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Let's try a slightly more complex example.\
\
I'm going to use an envelope for frequency:\
\
\cf3 Env\cf0 ([1000,20],[1.0]).plot		\cf4 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 The EnvGen gets plugged into the frequency input of the Saw wave:\
\
\{\cf3 Saw\cf0 .ar(\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([1000,20],[1.0])),0.1)\}.scope	 \cf4 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cf0 Now I'll change the frequency of Saw over 0.5 second and have its amplitude go to zero over 2 seconds:\
\
\{\cf3 Saw\cf0 .ar(\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([10000,20],[0.5])),\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([0.1,0],[2.0])))\}.scope	 	\cf4 \
\cf6 (A fast frequency sweep is called a chirp in engineering literature, btw).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 You can see how the nesting can get more and more complex, and it's now very difficult to read \
the code to see what's going on. This should really be neatened up by writing over a few lines:\
\
(\{\
	\cf3 Saw\cf0 .ar(\
		\cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 ([10000,20],[0.5])),  \cf4 //frequency input\cf0 \
		\cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 ([0.1,0],[2.0]))      \cf4 //amplitude input\cf0 \
	)\
\}.play\
)\
\
In SuperCollider you find yourself having to work out what is plugged into what for complex networks,\
all written as text. Remember that it may help you if you draw a diagram on paper of the connections. \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
I made one subtle difference when I rewrote it: I ran the EnvGen ar control rate (.kr) rather than audio rate (.ar). \
\
We've tried both .kr or .ar and there's no real difference to our ears (the changes are relatively slow, at least compared to audio oscillator calculations for high frequencies).\
\
We often use .kr when possible, because it means a lower CPU load and ultimately we can run many more\
UGens at once. \cf4 \
\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Envelopes have a further use of prime importance: they can cause a running collection of UGens to be deallocated once a multiplier envelope has run through its course. \
\
We'll need this when creating temporary events live. You don't want completed voices hanging around and wasting your CPU when you could be synthesising new voices.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //FM sound\cf0 \
(\cf6 \{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf7 SinOsc\cf6 .ar(\
	\cf7 SinOsc\cf6 .ar(10,0,10,440),\
	0.0,\
	\cf7 EnvGen\cf6 .kr(\cf7 Env\cf6 ([0.5,0.0],[1.0]), doneAction:2)   \cf8 //doneAction:2 appears again, the deallocation operation\cf6 \
	)\
\}.scope\
\cf0 )\
\
The doneAction argument means that the envelope, on completion, causes its enclosing Synth to be freed.\
\
The only thing that matters is how long the envelope lasts in time: the following also deallocates \
when the envelope ends, though it is controlling frequency rather than amplitude: \cf4 \
\
\cf0 \{\cf3 Saw\cf0 .ar(\cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 ([500,100],[1.0]),doneAction:2),0.1)\}.scope\
\
Note how the graphical server status GUI shows no running Synths once this is deallocated. \cf4 \
\
\
\
\
\
\
\
\
\
\
\cf0 \
\
\
\
\
\
We already saw some UGens that can be used like Envelopes, without the two stage \
Env/EnvGen construction. They work in deallocation too - here are examples:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Line\cf0 		\cf4 //straight line generator		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 XLine\cf0 		\cf4 //exponential line generator\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
\{\cf3 Saw\cf0 .ar(\cf3 SinOsc\cf0 .ar(1,0,10,440),\cf3 Line\cf0 .kr(0,1,1,doneAction:2))\}.scope\
\
\{\cf3 Saw\cf0 .ar(\cf3 SinOsc\cf0 .ar(1,0,10,440),\cf3 XLine\cf0 .kr(0.0001,1,1,doneAction:2))\}.scope\
\
\
\
\
\
\
\
\
\
\
\
There is a remaining thing to explain. I introduced the adsr Env type, and said it could deal with holding open for an unknown time, but did not go further then. \
\
If you explore the Env help file you'll find references to the releaseNode and loopNode. Let's explain these; they may come in handy later. \
\
\
\
Releasing envelopes\
\
Whilst some envelopes just run through their stages without intervention: \
\
\{\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([0,0.1,0],[0.1,0.9]),doneAction:2)*\cf3 SinOsc\cf0 .ar(330)\}.play\
\
others will freeze at a certain point, requiring a further instruction to 'release':\
\
a = \{\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 .asr(0.1,0.1,1.0),doneAction:2)*\cf3 SinOsc\cf0 .ar(330)\}.play \cf4 //sound continues\cf0 \
\
a.release(2.0); \cf4 //let it finish, taking 2.0 seconds to fade out (it then deallocates, due to the doneAction:2)\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //similar, but explicitly using gate argument, which holds the envelope at the releaseNode\cf0 \
a = \{\cf3 arg\cf0  gate=1; \cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 .asr(0.1,0.1,0.9),gate,doneAction:2)*\cf3 SinOsc\cf0 .ar(330)\}.play\
\
a.set(\cf9 \\gate\cf0 ,0) \cf4 //when gate is set to 0, the envelope can finish, and takes 0.9 seconds to fade out (releaseTime argument to Env.asr set above)\cf0 \
\
You will normally have a gate argument in these situations; one was missed out above when introducing release just for simplicity of exposition. \
\
\
To count the releaseNode number for an arbitrary envelope, imagine that the series of amplitude levels AFTER THE FIRST are indexed; each level and corresponding time gap leading to it is one node\
\
For \
\
e = \cf3 Env\cf0 ([0.2,1.0,0.0],[0.1,3.0],0,1); \cf4 //releaseNode at node 1, which is the pair of 0.0 level in the first array and 3.0 seconds in the second. \cf0 \
\
a= \{\cf3 arg\cf0  gate=1; \cf3 EnvGen\cf0 .ar(e,gate,doneAction:2)*\cf3 SinOsc\cf0 .ar(550,0,0.1)\}.play\
\
a.set(\cf9 \\gate\cf0 , 0); \cf4 //takes 3.0 seconds to fade out\cf0 \
\
\
\
\
\
Looping envelopes\
\
You can also get an envelope to go into a loop between the releaseNode minus one and the loopNode (the loopNode must be earlier than the releaseNode to be useful). Again, when receiving the release message or explicitly setting gate=0, the envelope transitions to the releaseNode and thence to the close.  \
\
e = \cf3 Env\cf0 ([0.0,0.0,1.0,0.0],[0.5,1.0,2.0],0,2,0); \cf4 //releaseNode at 2, loopNode at 0\cf0 \
\
a= \{\cf3 arg\cf0  gate=1; \cf3 EnvGen\cf0 .ar(e,gate,doneAction:2)*\cf3 SinOsc\cf0 .ar(550,0,0.1)\}.play\
\
a.set(\cf9 \\gate\cf0 , 0); \cf4 //takes 2.0 seconds to fade out\cf0 \
\
If you set the envelope looping fast enough, you can get interesting control signals and even head towards audio rate waveforms.\
\
e = \cf3 Env\cf0 ([0.0,1.0,-1.0,0.0],[0.01,0.01,2.0],0,2,0); \cf4 //releaseNode at 2, loopNode at 0\cf0 \
\
e.plot\
\
a= \{\cf3 arg\cf0  gate=1; \cf3 EnvGen\cf0 .ar(e,gate,timeScale:MouseX.kr(0.1,2.0),doneAction:2)\}.play\
\
a.set(\cf9 \\gate\cf0 , 0); \cf4 //stops immediately since release transition to 0.0 occurs over 2 seconds, too slow to be a pitched oscillation\cf0 \
\
\
\
\
\
}