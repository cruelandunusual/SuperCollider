{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red191\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs56 \cf0 Precise timing in SC: latency, bundles, OffsetOut\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf0 \
See also [\cf2 ServerTiming\cf0 ]\
\
In usual operation, when you ask for a Synth, SuperCollider tries to instantiate it as fast as possible: \
\
\cf2 Synth\cf0 (\cf3 \\makemenow\cf0 ); \cf4 //won't do anything unless you had a \\makemenow SynthDef : ) \cf0 \
\
There is a slight latency, of some milliseconds.  \
\
-------------------------------------------------\
Optional partial explanation:\
This is caused by the block boundary of calculation (SC works internally by default at 64 samples at a time, the control rate, and can only create new synths on the control period boundaries) and message passing overheads. There is a network connection between the localhost server and the language with communication by Open Sound Control protocol messages; this network communication takes some time (perhaps a few milliseconds on the same machine). If you control a synthesis server somewhere else on the internet outside a local area, it can take much longer!  \
-------------------------------------------------\
\
This almost-immediate instantiation is fine for reactive response when you want to minimise delay, say to an incoming MIDI message, a GUI button press, an onset trigger from audio...\
\
\
\
\
\
\
\
\
BUT, it can lead to ragged timing within sequencing. Since expert percussionists can reputedly hear inaccuracies in timing on the order of milliseconds, a little jitter in realisation time for supposedly isochronous sequences is noticeable in some circumstances. Investigation of complex rhythmic structures only realisable by machine may also depend on really accurate timing.  \
\
To get very accurate timing, instructions to the sound synthesis server can be time-stamped, where they are given a strongly marked future time of occurrence. This is at the cost of not having them happen immediately, but at some known delay, the latency. \
\
SuperCollider has a latency setting, which defaults to 0.2 seconds\
\
s.latency \cf4 //s global variable points to the default server\cf0 \
\
You can change this; I often go more for 50 milliseconds or so\
\
s.latency = 0.05\
\
btw, if you set the latency too small, so messages don't get through before their future time required, you may see 'late' messages in the post window which look like: \
late 0.009407656\
late 0.014832689\
late 0.005836474\
...\
\
\
\
\
\
\
\
\
\
\
In order to use the latency rather than have an 'as soon as possible' Synth, you wrap the message to make the Synth in a bundle (essentially, you make a time stamped packet, which in general use can contain multiple instructions for things that have to happen at exactly the same time, such as coincident musical events). The shortcut way is to write \
\
s.bind \{  \cf2 Synth\cf0 (\cf3 \\makemesoon\cf0 ); \};  \
\
If you had two things which had to happen simultaneously: \
\
s.bind \{  \cf2 Synth\cf0 (\cf3 \\makemesoon\cf0 );  \cf2 Synth\cf0 (\cf3 \\makemesoontooatthesametime\cf0 ); \};  \
\
\
\
Let's try and compare. We may find it difficult to hear the difference with the example next unless you concentrate, but as you make more complicated rhythmic structures and have more and more going on under control (for example, granulation effects), you may need to be careful about this.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //sound recipe, required\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf3 \\testbleep\cf0 ,\{ \cf2 Out\cf0 .ar(0,\cf2 Pan2\cf0 .ar(\cf2 Line\cf0 .kr(1,0,0.1,doneAction:2)*\cf2 SinOsc\cf0 .ar(440)*0.1,0.0))\}).add;\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //no use of latency, immediate, timing slightly more ragged\cf0 \
\
(\
\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 	inf\cf0 .do \{|i|	\
		\cf2 Synth\cf0 (\cf3 \\testbleep\cf0 ); \
		[0.5,0.25,0.02].wrapAt(i).wait; \
	\}	\
\}.fork;\
)\
\
\
\
(\
\{\
\cf2 	inf\cf0 .do \{|i|\
		s.bind \{  \cf2 Synth\cf0 (\cf3 \\testbleep\cf0 ); \};  \
		[0.5,0.25,0.02].wrapAt(i).wait; \
	\}	\
\}.fork;\
)\
\
try changing latency with the later loop to see the effect (the first loop would not be affected)\
s.latency = 0.2\
s.latency = 0.01\
\
\
See also this help file for more on bundles and alternative ways to create Bundles like makeBundle: \
[bundledCommands]\
\
\
\
\
\
\
\
Even with time stamps, there may be issues with acheiving absolute sample accuracy on the server. If you want to schedule two Synths, one to follow the other at an arbitrary position measured in samples (rather than relative time), you will find this is impossible; the synthesis server does not share a sample clock with the language (sampling rates are advertised as immutable, but sample clocks on audio interface hardware drift a little each second, so sample accuracy can be very difficult to achieve). \
\
(It is possible to acheive sample-based timing within Synths, using server-side scheduling; see the  Server-side Sequencing and Triggers tutorial for some examples.)\
\
However, you can do better than the control period boundary for starting new Synths, if you use the OffsetOut UGen rather than Out. This makes sure that the scheduled start position of a Synth leads to an accurate sample start position within a control period, by adding a fixed delay in samples as needed.\
\
[\cf2 OffsetOut\cf0 ]\
\
OffsetOut is used exactly like Out, and just does its stuff for you. \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //sound recipe; only difference is OffsetOut instead of Out\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf3 \\testbleep2\cf0 ,\{ \cf2 OffsetOut\cf0 .ar(0,\cf2 Pan2\cf0 .ar(\cf2 Line\cf0 .kr(1,0,0.1,doneAction:2)*\cf2 SinOsc\cf0 .ar(440)*0.1,0.0))\}).add;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //with OffsetOut\cf0 \
(\
\{\
	\cf2 inf\cf0 .do \{\cf2 |i|\cf0 \
		s.bind \{  \cf2 Synth\cf0 (\cf3 \\testbleep2\cf0 ); \};  \
		[0.5,0.25,0.001].wrapAt(i).wait; \
		\cf4 //note 0.001 milliseconds wait is under control period size, 64/44100 = 0.0014512471655329\cf0 \
	\}	\
\}.fork;\
)\
\
\
\cf4 //without\cf0 \
(\
\{\
	\cf2 inf\cf0 .do \{\cf2 |i|\cf0 \
		s.bind \{  \cf2 Synth\cf0 (\cf3 \\testbleep\cf0 ); \};  \
		[0.5,0.25,0.001].wrapAt(i).wait; \
		\cf4 //note 0.001 milliseconds wait is under control period size, 64/44100 = 0.0014512471655329\cf0 \
	\}	\
\}.fork;\
)\
\
\
\
\
}