{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red191\green0\blue0;\red0\green115\blue0;\red0\green0\blue191;\red0\green115\blue0;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs36 \cf2 //One fork appears inside the other:\cf0 \
(\cf3 \
\{\
\
	4.do\{\cf4 arg\cf3  j; 	\
		\
		\cf5 //nested sequence, create another fork\cf3 \
		\{\
			\
			8.do\{\cf4 arg\cf3  i;\
			\
				\cf4 Synth\cf3 (\cf6 \\event\cf3 , [\cf6 \\freq\cf3 ,(48+(i*3.3)+j).midicps,\cf6 \\amp\cf3 , (1.0-(i/8))]);\
				0.5.wait;\
			\}\
			\
		\}.fork;\
		\
		4.0.wait; \cf5 //outer fork must wait for inner fork to do its work\cf3 \
	\}\
\}.fork;\
\cf0 )\
\
\
\
\
(\
\cf2 //two quickly created sounds; they click because of the line generators being quite crude\cf0 \
\cf7 SynthDef\cf0 (\cf8 \\sound1\cf0 ,\{\cf7 arg\cf0  freq=440,amp=0.1; \
\cf7 var\cf0  sound; \
\
sound= \cf7 LPF\cf0 .ar(\cf7 Saw\cf0 .ar(freq),2000)*\cf7 Line\cf0 .kr(1,0,0.1, doneAction:2)*amp;\
\cf7 Out\cf0 .ar(0,\cf7 Pan2\cf0 .ar(sound,0.0))\
\}).add;\
\
\cf7 SynthDef\cf0 (\cf8 \\sound2\cf0 ,\{\cf7 arg\cf0  freq=440,amp=0.1; \
\cf7 var\cf0  sound; \
\
sound= \cf7 HPF\cf0 .ar(\cf7 LFPar\cf0 .ar(freq),1000)*\cf7 Line\cf0 .kr(0,1,0.5, doneAction:2)*amp;\
\cf7 Out\cf0 .ar(0,\cf7 Pan2\cf0 .ar(sound,0.0))\
\}).add;\
)\
\
\cf2 //test SynthDefs\cf0 \
\cf7 Synth\cf0 (\cf8 \\sound1\cf0 )\
\
\cf7 Synth\cf0 (\cf8 \\sound2\cf0 )\
\
\cf2 //nested scheduling; each bar has a different length, and uses one of two sounds\cf0 \
( \
\cf7 var\cf0  barlengths= [4.0,3.5,5.0];  \
 \cf7 var\cf0  t= \cf7 TempoClock\cf0 (2.5);\
\{ \
	 \
	\cf7 inf\cf0 .do\{\cf7 |i|\cf0   \
		 \
		\cf7 var\cf0  barnow= barlengths.wrapAt(i); \
		 \
		\cf9 "new bar"\cf0 .postln;\
		 \
		\{ \
		\cf7 var\cf0  whichsound; \
		\
		whichsound= [\cf8 \\sound1\cf0 ,\cf8 \\sound2\cf0 ].choose;\
			 \
			((barnow/0.25)-2).floor.do\{\cf7 |j|\cf0  \
				 \
				\cf7 Synth\cf0 (whichsound,[\cf8 \\freq\cf0 , 300+(100*j),\cf8 \\amp\cf0 ,0.3]);  \
				 \
				0.25.wait; \
				 \
			\};  \
			 \
		\}.fork(t); \
		 \
		barnow.wait; \
	\} \
	 \
\}.fork(t) \
 \
)\
\
\
\
\
\
\
\
\cf2 //another example\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 ( \
\cf7 var\cf0  t= \cf7 TempoClock\cf0 (2); \
 \
\{ \
	 \
	4.do\{ \
		\
		\cf9 "bar"\cf0 .postln; \
		\{ \
			 \
			[1.0,1.0,0.5,0.5,0.5,0.25,0.25].do\{\cf7 |val|\cf0  \cf7 Synth\cf0 (\cf8 \\event\cf0 , [\cf8 \\freq\cf0 ,rrand(48,84).midicps,\cf8 \\amp\cf0 , rrand(0.0,0.3)]); \cf9 "event"\cf0 .postln; val.wait;\};  \
		\}.fork(t); \
		 \
		4.0.wait; \
	\} \
	 \
\}.fork(t) \
 \
)\
\
\
\
\
\
\
\
\pard\pardeftab720\ql\qnatural
\cf2 //demonstration of a simple structure for a piece where different sections appear in a desired order \cf0 \
\cf2 //note if you were extending this to some large-scale form with sectional repeats, that repeated materials could be put into functions, to avoid repetition through encapsulation. \cf0 \
 \
( \
 \
\{ \
	 \
	\cf7 SynthDef\cf0 (\cf8 \\bleep\cf0 ,\{ \cf7 arg\cf0  out=0, note=60, amp=0.5, pan=0.0; \
		\cf7 var\cf0  freq, env;  \
		freq = note.midicps; \
		env = \cf7 EnvGen\cf0 .ar( \
		\cf7 Env\cf0 ([0,1,1,0],[0.01, 0.1, 0.2]), \
		levelScale:amp,  \
		doneAction:2 \
		); \
		\cf7 Out\cf0 .ar(out, \
		\cf7 Pan2\cf0 .ar(\cf7 Blip\cf0 .ar(freq) * env, pan) \
		) \
	\}).add; \
	 \
	 \
	\cf7 SynthDef\cf0 (\cf8 \\bleep2\cf0 ,\{ \cf7 arg\cf0  out=0, note=60, amp=0.5, pan=0.0; \
		\cf7 var\cf0  freq, env;  \
		freq = note.midicps; \
		env = \cf7 EnvGen\cf0 .ar( \
		\cf7 Env\cf0 ([0,1,1,0],[0.1, 0.1, 0.02]), \
		levelScale:amp,  \
		doneAction:2 \
		); \
		\cf7 Out\cf0 .ar(out, \
		\cf7 Pan2\cf0 .ar(\cf7 Blip\cf0 .ar(freq, \cf7 Line\cf0 .kr(10,1,1)) * env, pan) \
		) \
	\}).add; \
	 \
	\cf7 SynthDef\cf0 (\cf8 \\mlpitch\cf0 ,\{ \
		\cf7 var\cf0  soundin, amp, freq, hasFreq;  \
		 \
		soundin= \cf7 SoundIn\cf0 .ar;  \
		 \
		amp= \cf7 Amplitude\cf0 .kr(soundin); \
		#freq, hasFreq= \cf7 Pitch\cf0 .kr(soundin);  \
		 \
		\cf7 Out\cf0 .ar(0,amp*\cf7 SinOsc\cf0 .ar(freq)) \
	\}).add;  \
	 \cf3 \
	s.sync;  \cf5 //won't proceed until server confirms it has the SynthDefs ready\cf0 \
	 \
	\cf2 //make buffers; \cf0 \
	\cf2 //s.sync; \cf0 \
	 \
	\cf2 //three sections \cf0 \
	 \
	 \
	\cf2 //1. \cf0 \
	 \
	10.do\{\cf7 |i|\cf0  \
		 \
		\cf7 Synth\cf0 ([\cf8 \\bleep\cf0 , \cf8 \\bleep2\cf0 ].choose); \
		 \
		0.15.wait; \
	\}; \
	 \
	1.0.wait; \
	\cf2 //2. \cf0 \
	 \
	a= \cf7 Synth\cf0 (\cf8 \\mlpitch\cf0 ); \
	 \
	1.0.wait;  \
	 \
	a.free;  \
	 \
	1.0.wait;  \
	\cf2 //3. two sequences of actions happen simultaneously (note no gap between the two)\cf0 \
	 \
	\{ \
		100.do\{\cf7 |i|\cf0  \
			 \
			\cf7 Synth\cf0 ([\cf8 \\bleep\cf0 , \cf8 \\bleep2\cf0 ].choose,[\cf8 \\note\cf0 , ([60,62,64,66,67,69,71]-12).choose]); \
			 \
			rrand(0.05,0.15).wait; \
		\}; \
		 \
	\}.fork;  \
	\cf3 \
	\cf5 //though process has just been forked off, straight to do further things in this thread too!\cf3 \
	  \
	100.do\{\cf4 |i|\cf3  \
		 \
		\cf4 Synth\cf3 ([\cf6 \\bleep\cf3 , \cf6 \\bleep2\cf3 ].choose,[\cf6 \\note\cf3 , [60,62,64,66,67,69,71].choose]); \
		 \
		0.1.wait; \
	\}; \
	 \cf0 \
	 \
\}.fork;  \
) \
 \
 \
 \
 \
 \
 \
 \
 \
 \
 \
 \
 \
 \
 \
 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
}