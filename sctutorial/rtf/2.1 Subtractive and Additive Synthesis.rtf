{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red0\green255\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs48 \cf0 Sound Synthesis in SuperCollider: Subtractive and Additive Synthesis\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf0 \
Note that sounds will at first be in mono, in the left ear. Later on we will sort out stereo position. \
\
We are going to use the scope with many of these tutorials, to see the sound waveform. We'll get oscilloscope views of the sounds we synthesise, which assists with explaining some concepts.\
\
On SC3.6, use of the scope requires no special treatment. But for SC3.5 or earlier, you need the internal Server for this tutorial:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Server\cf0 .default=s=\cf2 Server\cf0 .internal;   \cf3 //run this line first, SC3.5\cf0 \
\
s.boot; \cf3 //or you may turn on the internal server via the graphical window; make sure the default button is pressed and highlighted; this tells the system which synthesizer to send instructions to\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
For our convenience we will be using a certain shortcut construction for practising sound synthesis. Later we will see another way of doing this that is a more recommended method, but we shall begin with the notation below because it avoids some issues for the moment, and allows us to get going straight away. \
\
The construct looks like the following, but don't try and run this code:\
\
(\
\{\
\cf3 //some synthesis code\cf0 \
\}.scope\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 )\
\
\cf3 //Run the following line though: this will create a frequency analysizer which we will continue to run in the background for spectral plotting of the sounds we explore. \cf0 \
\cf2 FreqScope\cf0 .new\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
Unit Generators\
\
SuperCollider follows the Unit Generator paradigm also used in other synthesis languages like Csound, Max/MSP, Pd, Reaktor and others.\
\
There are many primitive building blocks, like types of tone generator, filter or spatialiser, that are the unit generators. These are connected together in a processing graph to make more complicated synthesisers and sound processors. These primitives are referred to as UGens.  \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Each UGen has some set of inputs and outputs. Most UGens have just one output, an audio stream or some sort of control signal. The inputs vary a lot depending on the function of the UGen.\
\
You will get used to the typical parameter values expected as inputs or outputs as you learn about the different UGens.  \
\
There are certain ways to program connections which are part of the syntax of the SuperCollider language, and particular names for units that you will encounter as you learn this system.  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs48 \cf0 Subtractive Synthesis\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs36 \cf0 \
This is a good way to start learning SuperCollider.\
\
In subtractive synthesis, we start with a complex source, and we subtract parts from this raw sound to make a more sculpted sound. This is also termed a source+filter model.\
\
\
\{\cf2 WhiteNoise\cf0 .ar(0.1)\}.scope \cf3 //this line will make a pure white noise source, equal energy at all spectral frequencies; it can be unpleasant to listen to- the 0.1 makes sure its not too loud, but be careful playing this\cf0 \
\
\
That was just the source alone. Now I have to filter it to make a less raw sound. \
\
\{\cf2 LPF\cf0 .ar(\cf2 WhiteNoise\cf0 .ar(0.1),1000)\}.scope \
\
The LPF is a Low Pass Filter which tails off energy above its cutoff frequency, which is 1000Hz in this example\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
In SuperCollider, to plug the white noise generator WhiteNoise into the filter LPF I nest one within the other. You can think of a UGen's inputs being the list of slots within the parentheses\
\cf2 \
LPF\cf0 .ar(input signal, cutoff frequency, ... )\
\
and in the example above, the thing to plug into the input signal slot is a white noise source, so that's where the WhiteNoise generator goes. The cutoff frequency is a fixed number, 1000, the second argument. \
\
Say that we now want a varying filter cutoff over time. One UGen we could use here is the line generator, Line:\
\
\cf2 Line\cf0 .kr(10000,1000,10) \cf3 // take ten seconds to go from 10000 to 1000: inputs to Line are start, end, duration\cf0 \
\
So instead of the fixed value 1000, the Line UGen goes in that second slot\
\
\{\cf2 LPF\cf0 .ar(\cf2 WhiteNoise\cf0 .ar(0.1),\cf2 Line\cf0 .kr(10000,1000,10))\}.scope \cf3 //listen for ten seconds at least to hear the full effect\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
There are lots of possible sources and lots of possible filters (try these help files)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 some example sources:\
\
Oscillators\
[\cf2 \ul \ulc2 Saw\cf0 \ulnone ]\
[\cf2 \ul Blip\cf0 \ulnone ]\
\
Noise Sources\
[\cf2 \ul PinkNoise\cf0 \ulnone ]\
[\cf2 \ul LFNoise0\cf0 \ulnone ]\
\
some example filters:\
[\cf2 \ul HPF\cf0 \ulnone ]\
[\cf2 \ul BPF\cf0 \ulnone ]\
[\cf2 \ul Resonz\cf0 \ulnone ]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Example of plugging one source into a filter:\
\
\{\cf2 Resonz\cf0 .ar(\cf2 LFNoise0\cf0 .ar(400),1000,0.1)\}.scope\
\
Again using the Line generator to change the filter centre frequency over time\
\
\{\cf2 Resonz\cf0 .ar(\cf2 LFNoise0\cf0 .ar(400),\cf2 Line\cf0 .kr(10000,1000,10),0.1)\}.scope\
\
An explicit and neater way to write this (we'll come back to this formulation)\
\
(\
\{\
\cf2 var\cf0  source, line, filter; 	\cf3 //local variables to hold objects as we build the patch up\cf0 \
\
source=\cf2 LFNoise0\cf0 .ar(400);\
line=\cf2 Line\cf0 .kr(10000,1000,10);\
filter=\cf2 Resonz\cf0 .ar(source,line,0.1); \cf3 //the filtered output is the input source filtered by Resonz with a line control for the resonant frequency\cf0 \
\
filter \cf3 // last thing is returned from function in curly brackets, i.e. this is the final sound we hear \cf0 \
\}.scope;\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf4 Additive Synthesis\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
Rather than starting with something complex and taking energy away to sculpt a sound, we can start with simple building blocks and add many of them together to create more involved sounds\
\
\
The classic building block in computer music is the sine tone\
\
\{\cf2 SinOsc\cf0 .ar\}.scope \cf3 //defaults to a concert A (440Hz)\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Here is one way to get two sine tones at once:\
\
\
\{\cf2 SinOsc\cf0 .ar(400,0,0.1) + \cf2 SinOsc\cf0 .ar(660,0,0.1)\}.scope\
\
And here is a much easier way\
\
\{\cf2 SinOsc\cf0 .ar([400,660],0,0.1)\}.scope\
\
Something special just happened to the stereo field, and I'll explain this in a moment. \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Let me first introduce a panning UGen\
\
\
Pan2.ar(input signal, pan position)\
\
pan position goes from -1 (hard left) to 1 (hard right)\
\
\
\{\cf2 Pan2\cf0 .ar(\cf2 WhiteNoise\cf0 .ar(0.1), \cf2 MouseX\cf0 .kr(-1,1))\}.scope\
\
\
So the panner takes a mono signal, and places it in the stereo field. \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Now, multichannel sound is really straight forward to create in SuperCollider, just by using an array\
\
We'll look at arrays more closely in a later week, but for now just think of them as lists of data\
\
\
[100,200,300,400,500] \cf3 //5 numbers in a list\cf0 \
\
\
Each successive element in the list will be placed on one channel:\
\
\
\{\cf2 SinOsc\cf0 .ar([400],0,0.1)\}.scope \cf3 //one channel sound (see the scope)\
\
\cf0 \{\cf2 SinOsc\cf0 .ar(400,0,0.1)\}.scope \cf3 //also one channel sound- no array brackets are needed for a single number\cf0 \
\
\
\{\cf2 SinOsc\cf0 .ar([400,660],0,0.1)\}.scope \cf3 //two channel sound (see the scope)\cf0 \
\
\
\{\cf2 SinOsc\cf0 .ar([400,660,870],0,0.1)\}.scope \cf3 //three channel sound - you may only hear two, because you probably have a stereo output on your computer, not a three channel out\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
We need a way to take multiple channels of sound and turn them into a mono or stereo signal\
\
One method is to wrap the multichannel sound with a Mix UGen:\
\
\{\cf2 Mix\cf0 (\cf2 SinOsc\cf0 .ar([400,660],0,0.1))\}.scope \cf3 //a two channel signal put through Mix turns into mono\cf0 \
\
\
\
\
And then, of course, Pan2 allows me to place this in the stereo field:\
\
\{\cf2 Pan2\cf0 .ar(\cf2 Mix\cf0 (\cf2 SinOsc\cf0 .ar([400,660],0,0.1)),\cf2 MouseX\cf0 .kr(-1,1))\}.scope \cf3 //a two channel signal put through Mix turns into mono\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
You are now equipped to explore additive synthesis via sine tones.\
\
In additive synthesis, if we know a recipe for the spectrum (frequency content) of a sound, we can synthesise it by adding up sine tones for each component frequency.\
\
\
Recipes for common waveforms are known from the Fourier theory of sound (sinusoids at which frequencies and amplitudes to add up to create certain waveform shapes). \
\
\
Sawtooth wave: Add up n harmonics with amplitude falling off as 1/harmonicnumber, sign alternates between +1 and -1\
(\
\{\
	\cf2 var\cf0  n = 10; \
\
	\cf2 var\cf0  wave = \cf2 Mix\cf0 .fill(10,\{\cf2 |i|\cf0      \
		\
    	\cf2 var\cf0  mult= ((-1)**i)*(0.5/((i+1)));\
    \
    	\cf2 SinOsc\cf0 .ar(440*(i+1))*mult \
    \
    \}); \
\
	\cf2 Pan2\cf0 .ar(wave/n,0.0); \cf3 //stereo, panned centre\cf0 \
\
\}.scope; \
)\
 \
\
\
Square wave: Sum of odd harmonics, no even, amplitude falls as off 1/harmonicnumber; closest 'real' waveform is a clarinet tone\
\
(\
\{\
	\cf2 var\cf0  n = 10; \
\
	\cf2 var\cf0  wave = \cf2 Mix\cf0 .fill(10,\{\cf2 |i|\cf0  \
			\cf2 var\cf0  harmonicnumber = 2*i+1; \cf3 //odd harmonics only\cf0 \
			\cf2 SinOsc\cf0 .ar(440*harmonicnumber)/harmonicnumber \
		\})*0.25; \
\
	\cf2 Pan2\cf0 .ar(wave,0.0); \cf3 //stereo, panned centre\cf0 \
\
\}.scope; \
)\
\
Triangle wave: also odd harmonics only, falls off as 1 over harmonicnumber squared with alternating sign\
\
(\
\{\
	\cf2 var\cf0  n = 10; \
\
	\cf2 var\cf0  wave = \cf2 Mix\cf0 .fill(10,\{\cf2 |i|\cf0      \
		\
		\cf2 var\cf0  harmonicnumber= 2*i+1; \cf3 //odd harmonics only\cf0 \
    	\cf2 var\cf0  mult= ((-1)**((harmonicnumber-1)/2))*(1.0/(harmonicnumber*harmonicnumber));\
    \
    \cf2 SinOsc\cf0 .ar(440*index)*mult \})/n; \
\
	\cf2 Pan2\cf0 .ar(wave,0.0); \cf3 //stereo, panned centre\cf0 \
\
\}.scope; \
)\
\
\
\
\
\
\
\
\
\
\
\
Bell sound example:\
\
500*[0.5,1,1.19,1.56,2,2.51,2.66,3.01,4.1] \cf3 //This is a spectral recipe for a minor third bell, at a base frequency of 500- run this line of code to see how the frequencies are calculated from the multipliers\cf0 \
\
\
\{\cf2 Mix\cf0 (\cf2 SinOsc\cf0 .ar(500*[0.5,1,1.19,1.56,2,2.51,2.66,3.01,4.1],0,0.1))\}.scope \cf3 //bell spectra, all partials the same volume\cf0 \
\
\
I can also give each partial its own amplitude in the mix, rather than defaulting them all to 0.1\
\
\{\cf2 Mix\cf0 (\cf2 SinOsc\cf0 .ar(500*[0.5,1,1.19,1.56,2,2.51,2.66,3.01,4.1],0,0.1*[0.25,1,0.8,0.5,0.9,0.4,0.3,0.6,0.1]))\}.scope \cf3 //bell spectra, different volumes for partials\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Here is a generalisable patch that uses the variable n to hold the number of sine tones desired for each run of the code:\
\
(\
\cf2 var\cf0  n = 10;\
\
\{\cf2 Mix\cf0 (\cf2 SinOsc\cf0 .ar(250*(1..n),0,1/n))\}.scope;\
\
)\
\
If you're unsure what something is in code, investigate it in isolation:\
\
(1..10) \cf3 //run this line and see what comes up in the post window\cf0 \
\
\
There are lots of ways of dealing with arrays of data in SuperCollider, that we'll investigate as we go. \
\
 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}