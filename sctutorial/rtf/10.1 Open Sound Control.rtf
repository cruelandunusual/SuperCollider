{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Geneva;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green115\blue0;\red0\green0\blue255;\red51\green51\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs44 \cf0 Open Sound Control (OSC)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf0 \
\cf2 Server\cf0 .default=s=\cf2 Server\cf0 .internal;\
\
OSC is a communication protocol used for sending information across a computer network. It is promoted as the successor to MIDI (with greatly increased bandwidth and user-customisable representations), and is supported by most modern music software.\
\
\
It is the lifeblood of SuperCollider since all communication from the language application to the localhost server uses OSC! You may also send messages to any other SuperCollider Servers for which you have an IP location. So SuperCollider is immediately equiped for network music.  \
\
\
You can also use it to communicate with other applications like Max/MSP or Pd.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
For OSC, you create your own OSC Address Space, a tree of methods that get called when their corresponding string is invoked. In practice, this means you can choose how to tag the messages you pass. \
 \
(see http://www.cnmat.berkeley.edu/OpenSoundControl/OSC-spec.html for more)\
 \
You might use \
\
"/myparameters/object3/frequency" \
 \
 Or any other string, where the forward slashes / split up the tree to be traversed.\
 \
OSC messages themselves are denoted by an address string, a typetag string that says whether the information passed is a float, two integers etc and actual values for each type in the type string:\
\
address, typetags, values \
\
The message is passed to the appropriate method as soon as it arrives. \
\
A 'bundle' can also be sent, which is a set of OSC commands that are to be called simultaneously- an absolute time tag is also enclosed, to control exactly when the commands are carried out. \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
To send general OSC to a known IP use the\cf2  NetAddr\cf0  class:\
\
[\cf2 \ul \ulc2 NetAddr\cf0 \ulnone ]\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 //demo to send to the localhost Server\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  n, id;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 //loopback address is 127.0.0.1- try substituting the IP address of another user's machine\cf0 \
n=\cf2 NetAddr\cf0 (\cf4 "127.0.0.1"\cf0 , 57110); \cf3 //57110 is the port number; this is the standard number used by the Server\cf0 \
\
id=s.nextNodeID;\
n.sendMsg(\cf4 "s_new"\cf0 ,\cf5 \\default\cf0 ,id,0,0);   \cf3 //sendMsg works out the correct OSC message for you\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SystemClock\cf0 .sched(1.0,\{n.sendMsg(\cf4 "n_free"\cf0 ,id); \});\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
To send standard messages to control a SuperCollider server, the Server class is a better interface. Underneath, it uses NetAddr as above.  \
[\cf2 \ul Server\cf0 \ulnone ]\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
To receive and react to OSC messages in SCLang you will use the OSCFunc or OSCdef classes (used since SC 3.5. For SC3.4 or earlier see OSCresponder and OSCresponderNode, tutorial reproduced lower down this file)\
\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // register to receive a trigger message\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 o = OSCFunc\cf0 (\{ \cf6 arg\cf0  msg,time,address,receivedPort;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 "received trigger!"\cf0 .postln;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Post\cf0  << msg <<nl;\
\}, \cf3 //Function\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf5 '/tr',\cf0 	\cf3 //OSC message address name,\cf0 \
s.addr \cf3 //NetAddr (where the message will arrive from). Leave this nil if you want to allow it to come from anywhere (for example, if another application is sending from a variable or unknown port)\cf0 \
);	\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 //send a trigger message whenever the impulse fires (once every 2 seconds)\cf0 \
\{\cf2 SendTrig\cf0 .ar(\cf2 Impulse\cf0 .ar(0.5))\}.play;\
)	\
	\
\
\cf3 //keep it running and now run these lines:\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 p= OSCFunc\cf0 (\{ \cf2 arg\cf0  time,responder,msg;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 "new reaction!"\cf0 .postln;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Post\cf0  << time <<nl;\
\
\},\cf5 '/tr',\cf0 s.addr);	\
)		\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 //remove the OSCFunc instances\cf0 \
o.free; \
p.free;\
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 OSCFunc instances are freed if you press cmd+period \
(SC 3.4: note that this is different to the old behaviour with OSCresponder for SC 3.4 and earlier.) \
\
They can be re-enabled:\
p.enable\
\
And they can be made permanent to avoid them being affected by cmd+period: \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 p.permanent_(\cf7 true\cf0 ) \cf3 //you can also do this when first creating one\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
You can add as many different functions to one OSCFunc instance as you like (internally it holds a 'FunctionList'). \
f = \{\cf4 "whatever"\cf0 .postln;\}; \
\
p.add(f); \
\
p.remove(f)\
\
p.add(\{\cf4 "whatever"\cf0 .postln;\}) \cf3 //add some function, don't keep any reference to it\cf0 \
\
p.clear; \cf3 //remove all functions from the OSCFunc's list\cf0 \
\
\
\
\
OSCdefs are used in a similar way to OSCFunc, but you can 'name' the specific instance, e.g. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 OSCdef\cf0 (\cf5 \\namedOSCdef\cf0 ,\{\cf4 "new reaction!"\cf0 .postln;\},\cf5 '/tr'\cf0 ,s.addr);	\
\cf2 OSCdef\cf0 (\cf5 \\namedOSCdef\cf0 ).disable;\
\
\
\
\
\
\
It's helpful sometimes to be able to see all incoming OSC traffic: \
\cf2 OSCFunc\cf0 .trace(\cf7 true\cf0 ); \cf3 // Turn posting on\cf0 \
\cf2 OSCFunc\cf0 .trace(\cf7 false\cf0 ); \cf3 // Turn posting off\cf0 \
\
\
You might also like to read the [OSC Communication] help file to accompany this explanation. \
\
\
\
\
\
\
\
-----------------------------------------------------------------------------------------------------------------------------------------------\
For SC3.4 and earlier, old style use of OSCresponder (also supported in 3.5 or later for backwards compatibility)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 To receive and react to OSC messages in SCLang you will use the OSCresponder class \
[\cf2 \ul \ulc2 OSCresponder\cf0 \ulnone ]\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // register to receive a trigger message\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 OSCresponder\cf0 (s.addr,\cf5 '/tr'\cf0 ,\{ \cf2 arg\cf0  time,responder,msg;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 "received trigger!"\cf0 .postln;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Post\cf0  << msg <<nl;\
\
\}).add;	\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 //send a trigger message whenever the impulse fires (once every 2 seconds)\cf0 \
\{\cf2 SendTrig\cf0 .ar(\cf2 Impulse\cf0 .ar(0.5))\}.play;\
)		\
\
\
\cf3 //keep it running and now run these lines:\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 OSCresponder\cf0 (s.addr,\cf5 '/tr'\cf0 ,\{ \cf2 arg\cf0  time,responder,msg;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 "new reaction!"\cf0 .postln;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Post\cf0  << time <<nl;\
\
\}).add;	\
)		\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 //remove the responder\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 OSCresponder\cf0 .all.do(\{\cf2 arg\cf0  val; if(val.cmdName==\cf5 '/tr'\cf0 ,\{\cf2 OSCresponder\cf0 .remove(val)\}); \})\
\
\
\
OSCresponderNode can be used if you need more than one responder for a particular message. \
[\cf2 \ul \ulc2 OSCresponderNode\cf0 \ulnone ]\
\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // register to receive a trigger message\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 OSCresponderNode\cf0 (s.addr,\cf5 '/tr'\cf0 ,\{ \cf2 arg\cf0  time,responder,msg;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 "received trigger!"\cf0 .postln;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Post\cf0  << msg <<nl;\
\
\}).add;	\
\
\cf2 OSCresponderNode\cf0 (s.addr,\cf5 '/tr'\cf0 ,\{ \cf2 arg\cf0  time,responder,msg;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 "different reaction!"\cf0 .postln;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Post\cf0  << time <<nl;\
\
\}).add;	\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 //send a trigger message whenever the impulse fires (once every 2 seconds)\cf0 \
\{\cf2 SendTrig\cf0 .ar(\cf2 Impulse\cf0 .ar(0.5))\}.play;\
)	\
\
\cf3 //clear all OSCresponderNodes for the trigger message\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 OSCresponder\cf0 .all.do(\{\cf2 arg\cf0  val; if(val.cmdName==\cf5 '/tr'\cf0 ,\{\cf2 OSCresponder\cf0 .remove(val)\}); \})\
\
This would have been easier if we'd set each created OSCresponderNode into a variable x say, then we could go:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 x=\cf2 OSCresponderNode\cf0 (s.addr,\cf5 '/tr'\cf0 ,\{ \cf2 arg\cf0  time,responder,msg;  \cf4 "bang!"\cf0 .postln;\}).add\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 then\cf3 \
\
\cf0 x.remove; \
\
\
\
\
\
}