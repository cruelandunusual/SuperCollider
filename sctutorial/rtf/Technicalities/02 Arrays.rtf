{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf330
{\fonttbl\f0\fnil\fcharset77 Geneva;\f1\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green191\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green255\blue0;\red0\green0\blue0;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf2 Arrays\cf0 \
\
SuperCollider has lots of collection classes, but for simple tasks you can often just define arrays of data within square brackets:\
\
a= [5,6,7,8,9,10];  \
\
Sometimes we need to be more explicit about how to build the list of data, and we can write our own functions to generate data:\
\
a= \cf3 Array\cf0 .fill(6, \{\cf3 arg\cf0  i;  i+5\});  \
\
\
You'll gradually pick up the use of the Collection classes like Array, but I'll show you a few more tricks right now as a taster. \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Some different ways of making Arrays (try each in turn):\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Array\cf0 .series(10,1,1) \cf4 //arguments to series are number of elements, start element, and add\cf0 \
\
(1..10) \cf4 //this is a shortcut for the same thing\cf0 \
\
\cf3 Array\cf0 .series(10,1,2) \
\
(1,3..20) \cf4 //again a shortcut\cf0 \
\
\
\cf3 Array\cf0 .geom(10, 1, 1.1); \cf4 //geometric rather than arithmetic series: arguments number of elements, start element, grow ratio\cf0 \
\
\cf3 Array\cf0 .geom(10, 1, 10); \cf4 //be careful, the law of compound interest can make these numbers expand very fast! \cf0 \
\
\
\
\cf3 Array\cf0 .rand(10, 0.7,2.4); \cf4 //make 10 random numbers drawn from a linear distribution between 0.7 and 2.4\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Some different ways of manipulating arrays: just try each line out in turn and see what gets posted to the post window!\
\
\
a = [1,3,5,6];\
\
a+5\
\
a*8\
\
a**2 \cf4 //take to power of 2\cf0 \
\
a.squared \cf4 //same thing\cf0 \
\
a.sqrt\
\
a.scramble \cf4 //run me multiple times!\cf0 \
\
a.rotate(1)\
\
a.rotate(-1)\
\
a-10\
\
(a-10).abs\
\
a>4\
\
a.reverse\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Indexing elements in arrays\
\
b=[2,3,4,7]\
\
b.at(3) \cf4 //get the element at index 3 (meaning the fourth element)\cf0 \
\
b.at(4) \cf4 //won't return anything because the array isn't big enough! nil is a placeholder for 'no response possible' and will lead to trouble when it crops up\cf0 \
\
b.put(2,50) \cf4 //put 50 into the slot at index 2 (replace third element)\cf0 \
\
b \cf4 //note that b itself has been changed\cf0 \
\
b.put(14,90) \cf4 //crash- won't work, no space to put the 90 in, array only has four element slots\cf0 \
\
You can also use Java array notation\
\
b[0] \cf4 //get first element\cf0 \
\
b[0]= 74 \cf4 //set first element\cf0 \
\
b \cf4 //was changed\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
There are further types of Collection class we may deal with later. \
you may wish to explore the various class help files: be warned that there is a class hierarchy in operation here so a method won't necessarily be in the Array class itself\
\
[\ul Collections\ulnone ]\
[\ul SequenceableCollection\ulnone ]\
[\ul ArrayedCollection\ulnone ]\
[\ul Array\ulnone ]\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf5 A note about efficiency\cf0 \
\
You will occasionally see \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf6 #[1,2,3] \cf7 //makes a totally fixed (non-dynamic) Array and is slightly cheaper, especially where you're not going to change the Array once you make it\cf6 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0 \cf0 \
rather than \
\
\cf6 [1,2,3] 	\cf7 //a dynamic array \cf6 \
\cf0 \
To show the difference\
\
a= 
\f1 #[1,2,3];\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 a[0] \cf7 //works\cf6 \
\
a[0] = 8 \cf7 //fails, because it can't be changed\cf6 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0 \cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf5 More about Mix and Arrays\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
Let's now look at using an Array with fill to help prepare a UGen network- for this case it's easy to use the automatic channel expansion method we saw already, but you'll find this alternative helpful in more complex cases, say where you're mixing a hundred varied voices at once!  \
\
(					\cf4 //you'll only hear the first two of four frequencies if you have just a stereo output\
\cf0 \{\
\cf3 var\cf0  freqs,array;\
\
freqs= [440,443,447,455.7];\
 			\
array=\cf3 Array\cf0 .fill(4,			\cf4 //4 elements will go into this array\
\cf0 \{\cf3 arg\cf0  i;			\cf4 //this function is the recipe to make each element			\
\cf3 SinOsc\cf0 .ar(freqs.at(i), 0, 0.1)\
\});\
\
array\
\}.scope\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //We can use Mix to make this one channel\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
(				\cf4 \
\cf0 \{\
\cf3 var\cf0  freqs,array;\
\
freqs= [440,443,447,455.7];\
 			\
array=\cf3 Array\cf0 .fill(4,			\cf4 //4 elements will go into this array\
\cf0 \{\cf3 arg\cf0  i;			\cf4 //this function is the recipe to make each element			\
\cf3 SinOsc\cf0 .ar(freqs.at(i), 0, 0.1)\
\});\
\
\cf3 Mix\cf0 (array)\
\}.scope\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //There is a shortcut using Mix.fill\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
(					\cf4 //you'll hear the first two of four frequencies if you only have a stereo output\
\cf0 \{\
\cf3 var\cf0  freqs,array;\
\
freqs= [440,443,447,455.7];\
 			\
\cf3 Mix\cf0 .fill(4,			\cf4 //4 elements will go into this array\
\cf0 \{\cf3 arg\cf0  i;			\cf4 //this function is the recipe to make each element			\
\cf3 SinOsc\cf0 .ar(freqs.at(i), 0, 0.1)\
\});\
\
\}.scope\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
}