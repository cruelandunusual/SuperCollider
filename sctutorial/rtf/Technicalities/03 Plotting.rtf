{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;\red0\green0\blue191;\red0\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs50 \cf0 Plotting with SC\
\
I assume you're familiar with Stethoscope (\{\}.scope) and FreqScope (\{\}.freqscope) already\
\
\
plot \cf2 //highlight the method name 'plot' and ask for classes which implement it (cmd+Y on Mac)\cf0 \
\
\
Function plotting lets you check synthesis and draw diagrams!\
\
\cf2 //one cycle of a triangle wave at 100 Hz\cf0 \
\{\cf3 LFTri\cf0 .ar(100)\}.plot(0.01)\
\
\cf2 //observe frequency modulation close up\cf0 \
\{\cf3 SinOsc\cf0 .ar(400+\cf3 SinOsc\cf0 .ar(100,0,200))\}.plot(0.025)\
\
\cf2 //observe stereo frequency modulation at a distance\cf0 \
\{\cf3 SinOsc\cf0 .ar(400+\cf3 SinOsc\cf0 .ar([10,100],0,[200,100]))\}.plot(0.2)\
\
\
\
\
\
\
\
\
\
Envelopes\
\
\cf3 Env\cf0 ([0,1,1,0],[0.5,1.0,2.0],[10,0,-4]).plot \cf2 //this one you've probably seen before in learning about Env?\cf0 \
\
\
i= \cf3 InterplEnv\cf0 ([0,1,1,0],[0.5,1.0,2.0],[10,0,-4]).plot\
\
If you've not seen InterplEnv before, it's used with an IEnvGen\
\
\{\cf3 SinOsc\cf0 .ar(\cf3 IEnvGen\cf0 .kr(i,\cf3 MouseX\cf0 .kr(0,3.5))*500+200,0,0.2)\}.play\
\
It can therefore replace using the Index UGen (which requires a buffer to be allocated), but also allows continuous ranges\
\
\
\
\
\
\
\
\
\
Plotting an ArrayedCollection\
\
[0,5,1,3,2,4].plot\
\
\
\
Plotting a Buffer\
\
b=\cf3 Buffer\cf0 .read(s,Platform.resourceDir +/+ \cf4 "sounds/a11wlk01.wav"\cf0 ); \
\
b.plot\
\
\{\cf3 PlayBuf\cf0 .ar(1,b)\}.play\
\
\cf2 //get to language safely\cf0 \
b.loadToFloatArray(0,-1,\{\cf3 arg\cf0  data; a=data;\})\
\
a.plot\
\
\cf2 //manipulate using language\cf0 \
a= a.collect\{\cf3 |val|\cf0  if(0.1.coin,\{val*val\},\{val*val*val\}) \}; \
\
a.plot\
\
\cf2 //return to buffer\cf0 \
b.loadCollection(a); \
\
b.plot\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Wavetable\
\
(also see Shaper, Osc, Signal, Wavetable help files)\
\
A wavetable has a special efficient data format which can be loaded to a buffer for use with the Osc and Shaper UGens. \
\
You either have to use some special Wavetable creating class methods (for example, sineFill and chebyFill) or create one via a Signal\
\
a= \cf3 Signal\cf0 .fill(256,\{\cf3 arg\cf0  i; \cf3 var\cf0  t= (i/255.0)+0.1.rand;  (t*t)-t+(0.3*t*t*t)\}); \
\
a= a.asWavetable\
\
a.size \cf2 //doubles size; adds interpolated values that are the secret ingredient of a wavetable\cf0 \
\
Plotting a wavetable will show you the wavetable with the special interpolating values hidden.\
\
a.plot\
\
b=\cf3 Buffer\cf0 .alloc(s,512,1);\
\
b.loadCollection(a);\
\
b.plot \cf2 //this will show the hidden values too; looks weirder!\cf0 \
\
\{\cf3 Osc\cf0 .ar(b,440,0,0.2)\}.play \cf2 //buzzy Synth\cf0 \
\
\{\cf3 LPF\cf0 .ar(\cf3 Osc\cf0 .ar(b,\cf3 MouseX\cf0 .kr(50,500,\cf5 'exponential'\cf0 ),0,0.2),\cf3 MouseY\cf0 .kr(100,10000,\cf5 'exponential'\cf0 ))\}.play \cf2 //filter, but probably already aliasing\cf0 \
\
 \
\
\
\
\
SoundFiles\
\
f= \cf3 SoundFile\cf0 .openRead(\cf6 Platform\cf7 .resourceDir +/+ \cf4 "sounds/a11wlk01.wav"\cf0 );\
\
f.plot \cf2 //uses the SCSoundFileView\cf0 \
\
\
\
\
\
\
\
Some other graphing functions\
\
\
histograms via Collection:histo\
\
\cf3 Array\cf0 .rand(1000,0.0,1.0).histo(10,0,1).plot(minval:0,maxval:200)   \cf2 //histo first argument is number of histogram bins\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs34 \cf0 \
---------------------------------------------------------\
advanced (requires use of Extensions folder/Quarks, see Extending SC): \
For fun: Dan Stowell's HeatMap (it's a Quark, example from the help file)\
\
\pard\pardeftab560\ql\qnatural

\fs2 \cf0 \
\pard\pardeftab560\ql\qnatural

\fs32 \cf2 // This distribution is interesting, but .plot doesn't really show why:\cf0 \
a = 20.collect\{\cf3 |x|\cf0 20.collect\{\cf3 |y|\cf0  (x+y/pi).sin.rand\}\}.flat;\
a.plot(numChannels:20);\
a.heatMap(20); \cf2 // Much better!\cf0 \
\cf2 // Choose your colour scheme:\cf0 \
a.heatMap(20, colscheme: \cf5 \\red\cf0 );\
a.heatMap(20, colscheme: \cf5 \\brw\cf0 );\
a.heatMap(20, colscheme: \cf5 \\coals\cf0 );
\fs2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs34 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs50 \cf0 \
\
\
}