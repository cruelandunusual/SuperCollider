{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fnil\fcharset77 Geneva;\f1\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green112\blue0;\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs46 \cf0 SuperCollider the Programming Language (advanced)\

\fs36 \
SuperCollider is an object oriented interpreted language based upon the classic object oriented language Smalltalk, though also including C/Java syntax and further influences.  \
\
There is an accompanying tutorial about classes in SuperCollider and what object oriented programming is. \
\
A good discussion of technical details for SC is found in: \
\
James McCartney, Rethinking the Computer Music Language: SuperCollider \
Computer Music Journal, 26:4, pp. 61-68, Winter 2002. \
\
And some topics are covered under the 'Language' section of the Main helpfile page.\
\
I'll cover a few special features of the language below:\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
The goal in SuperCollider is usually to construct a sound instrument as a network of unit generators. To create the signal processing chain, the user writes a function. This means that, unlike in graphical unit generator languages like Reaktor or MAX/MSP, the full facility of an algorithmic programming language is available:\
\
(\
\{		\cf2 //here is the UGen network creating function\
\cf3 var\cf0  n, z;\
\
n= 50; 		\cf2 //but you can change this to whatever number you want! \
\cf0 \
z= 1;\
\
n.do(\{\cf3 arg\cf0  i;   z= \cf3 LFNoise0\cf0 .ar(z*(i+1), rrand(0.1,2.5), 2.5); \});\
\
\cf3 SinOsc\cf0 .ar(30+(100*z),0, 0.1) \
\}.play;\
)\
\
\
Of course we can construct user interfaces algorithmically too and do plenty more that is pretty awkward or impossible in more graphical selection based programs. \
\
\
\
\
\
\
\
\
\
\

\fs46 Dynamic typing\

\fs36 \
(\
\cf3 var\cf0  a;\
\
a= 5;\
\
a= \cf4 "string"\cf0 ; \
\
a= \cf5 \\symbol\cf0 ;\
\
a=\cf3 MouseX\cf0 .new;\
)\
\
(\
\cf2 //So we don't have to set types in variable declarations as in C:\cf0 \
\
double a;\
float ** f; \
)\
\
\
\
\
\
\
\
\
\
\
\
\
Memory management is automated, with a realtime garbage collector; there aren't any pointers to worry about.  \
\
We can make References using the class Ref:\
\
\cf3 Ref\cf0 .new([3,4,5]);\
\
or shortcut:\
\
`[3,4,5];\
\
Which are sometimes useful for passing by reference in functions and to avoid MultiChannel expansion in UGens (see the Klank UGen) \
\
\
\
\
\
\
\
\
\
\
\
\
When using a function, the default is 'pass by value'\
\cf6 \
\cf7 //passing by value\
\cf0 f= \{|a,b| a=a+5; a+b\};\
\cf6 \
(\
c=8;\
\
f.value(c,9).postln;\
\
c \cf7 //c has not been changed by function f - its value was copied into the argument to the function\cf6 \
)\
\
\
\cf2 //passing by reference (the argument to a function will be a reference to the original, not a copy)\cf0 \
f= \{|a,b| a.value_(a.value+5); a.value+b\};\
\cf6 \
(\
c=\cf8 Ref\cf6 (8);\
\
f.value(c,9).postln;\
\
c \cf7 //c has been changed within the function\cf6 \
)\
\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
Here are some special facilities of the Function class you may see in action: \
\
Variable length argument lists\
\
(\
f= \{\cf3 arg\cf0  ...args;  args.postln;  \};\
\
f.value(9,10,\cf4 "dave"\cf0 ); \
\
f.value([9,2,3,\cf5 \\dave\cf0 ],7, 789,34, 456, 678);\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Dynamic binding of arguments\
\
(\
f= \{\cf3 arg\cf0  freq, penguin;  [freq, penguin].postln; \};\
\
currentEnvironment.use(\
\{\
~freq= 678;\
~penguin=\cf5 \\chocolate\cf0 ;\
 \
f.valueEnvir;\
\});\
\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Calling methods of a class by name\
\
(\
a=\cf3 Array\cf0 .perform(\cf5 \\fill\cf0 , 9, \{\cf3 arg\cf0  i; i*i\});\
a.postln;\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\

\fs44 A Note About Inheritance\

\fs36 \
For methods (functions defined in class files) single message dispatch is used. SC only allows single inheritance. \
\
Function overriding is used in derived classes but function overloading is never possible\
\
\cf3 MyClass\cf0 \
\{\
\
*one\{\cf3 arg\cf0  x; \}\
\
*one\{\cf3 arg\cf0  x, y; \}\
\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs54 \cf0 \

\f1\fs36 \'a5 ERROR: Method Meta_MyClass::one already defined.
\f0\fs54 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
 }