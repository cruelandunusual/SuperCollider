{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green115\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf2 Scheduling with Routines and Tasks\cf0 \
\
some relevant help files:\
\
[\cf3 \ul \ulc3 Routine\cf0 \ulnone ]\
[\cf3 \ul Task\cf0 \ulnone ]\
\
\
s = \cf3 Server\cf0 .local; \
s.boot;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //add me first - this sound is going to be used for the scheduling demoes\
//It's important we use SynthDef and Synth here: notice the doneAction!\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\cf3 SynthDef\cf0 (\cf2 \\bleep\cf0 ,\{ \cf3 arg\cf0  out=0, note=60, amp=0.5, pan=0.0;\
	\cf3 var\cf0  freq, env; \
	freq = note.midicps;\
	env = \cf3 EnvGen\cf0 .ar(\
					\cf3 Env\cf0 ([0,1,1,0],[0.01, 0.1, 0.2]),\
					levelScale:amp, \
					doneAction:2\
				);\
	\cf3 Out\cf0 .ar(out,\
		\cf3 Pan2\cf0 .ar(\cf3 Blip\cf0 .ar(freq) * env, pan)\
	)\
\}).add;\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
In 'Clocks and Scheduling' scheduling was always achieved by scheduling a function for a specific time. In order to be able to step through different stages of a program, it is helpful to have a special type of function that can have a number of execution stages. It is not evaluated all at once with .value, but can "yield" its current value at each of multiple stages.\
\
This is a Routine:\
\
(\
r=Routine(\{\
\
1.yield; \
\
2.yield;\
\
3.yield;\
\
\})\
)\
\
r.value; \cf4 //run this line four times\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //another example with more going on\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  r;\
r = \cf3 Routine\cf0 (\{\
		\cf3 var\cf0  x;\
		x = 1.0.rand;\
		2.yield;\
		x.yield;\
		1000.yield;\
		x.yield;\
		x = 1.0.rand;\
		x.yield;\
	\});\
	\
10.do(\{ r.value.postln \});\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // a routine can also have side effects\cf0 \
\
(\
r = \cf3 Routine\cf0 (\{\
		1.yield;\
		\cf3 Synth\cf0 (\cf2 \\bleep\cf0 );\
		2.yield;\
		1.yield;\
		\cf3 Synth\cf0 (\cf2 \\bleep\cf0 );\
		1.yield;\
	\});\
)\
\
r.next; \cf4 // btw. r.next is a synonym. r.value or r.next both return the "yield value".\cf0 \
r.next;\
r.next;\
r.next;\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cf4 // we can now simply use the routine by playing it on a certain Clock\cf0 \
\
(\
r = \cf3 Routine\cf0 (\{\
		0.5.yield;\
		\cf3 Synth\cf0 (\cf2 \\bleep\cf0 );\
		1.yield;\
		0.5.yield;\
		\cf3 Synth\cf0 (\cf2 \\bleep\cf0 , [\cf2 \\note\cf0 , 43]);\
		0.5.yield;\
	\});\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SystemClock\cf0 .sched(0, r);		\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
However, best practice is usually just to "play" the Routine, passing in the Clock\
\
r.reset;	\cf4 // reset transforms the routine back into its original state\cf0 \
r.play(\cf3 SystemClock\cf0 ); \
\
r.reset;\
r.play(\cf3 TempoClock\cf0 (3));\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Yield can return any kind of object. \
Nevertheless, a meaningful time period value needs to be a float or an integer. \
To make clear that we mean a relative time, wait is used instead of yield (.wait just means the same as .yield);\
\
\
\cf3 TempoClock\cf0 .default.tempo_(1); \cf4 //just making sure default is sensible. In actual fact, for a tempoclock going at 1 bps, time in beats is the same as time in seconds \cf0 \
\
(\
\cf3 var\cf0  r;\
r = \cf3 Routine\cf0 .new(\{\
	\cf5 "I just began!"\cf0 .postln;\
	1.0.wait;\
	\cf5 "1 second later"\cf0 .postln;\
	2.0.wait;\
	\cf5 "finished"\cf0 .postln;\
\});\
\
r.play; \cf4 //defaults to TempoClock.default;\cf0 \
)\
 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
(\
\cf3 var\cf0  r;\
r = \cf3 Routine\cf0 .new(\{\
	16.do(\{ \cf3 arg\cf0  i; \
		\
		\cf3 Synth\cf0 (\cf2 \\bleep\cf0 , [ \cf2 \\note\cf0 , 36+(3*i) ]);\
		0.25.yield;  \cf4 //  yield and wait mean the same thing \cf0 \
	\
	\});\
\});\
\
r.play;\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
inf.do can be used to keep going forever; but you must be very careful never to miss out some positive time .wait command. Because otherwise, the loop will go infinitely fast and SuperCollider (and possibly also your computer) will crash. \
\
(\
\cf3 var\cf0  r;\
r = \cf3 Routine\cf0 .new(\{\
	\cf3 inf\cf0 .do(\{ \cf3 arg\cf0  i; \
		\
		\cf3 Synth\cf0 (\cf2 \\bleep\cf0 , [ \cf2 \\note\cf0 , 36+(3*(i%10)) ]); \cf4 //added %10 to stop it going up forever\cf0 \
		0.25.wait;   \cf4 //do not miss me out!\cf0 \
	\
	\});\
\});\
\
r.play;\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // a Task is a Routine that can be paused and resumed:\cf0 \
\
(\
t = \cf3 Task\cf0 .new(\{\
		\cf3 inf\cf0 .do(\{ \cf3 arg\cf0  i; \cf4 // keep going forever (until stopped externally)\cf0 \
			\cf3 Synth\cf0 (\cf2 \\bleep\cf0 , [\cf2 \\note\cf0 , 36+(2.3*(i%17))]);\
			0.25.wait; \
		\});\
\});    \
)\
\
t.play(\cf3 TempoClock\cf0 (1.4)); \cf4 //start the Task going\cf0 \
\
t.pause;  \cf4 //pause\cf0 \
\
t.resume;  \cf4 //unpause\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
There is a special shortcut for a Routine that can be useful:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\{\}.fork\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
This will automatically wrap your function in a routine and play it; you pass in the clock as an argument to fork:\
\
\
\
\{5.do\{\cf5 "hello"\cf0 .postln; 1.0.wait\} \}.fork(\cf3 TempoClock\cf0 (1))\
\
\
(\
\{16.do\{\cf3 arg\cf0  i; \cf3 Synth\cf0 (\cf2 \\bleep\cf0 , [\cf2 \\note\cf0 ,rrand(48,84) ,\cf2 \\amp\cf0 , rrand(0.0,0.125)]); 0.125.wait\} \}.fork(\cf3 TempoClock\cf0 (2))\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
}