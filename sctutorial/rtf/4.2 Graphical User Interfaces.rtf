{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fnil\fcharset0 Geneva;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green115\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green0\blue191;\red0\green0\blue0;\red191\green0\blue0;\red96\green96\blue96;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf2 Graphical User Interface Classes for SuperCollider\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf3 Server\cf0 .default=s=\cf3 Server\cf0 .local;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0 \cf0 \
Graphical user interface capabilities in SC let us build frontends for our computer music projects. They are a convenient way to create custom virtual synths, and package up novel programs for ourselves and other users.  \
\
GUI classes include various forms of slider, buttons, dials, drop down lists, drag and drop facilities and many more custom views. \
\
This file will use code which should work on all platforms without any worry about the underlying implementation (SC 3.3.1 on). There may be slight differences between versions of SuperCollider on the available GUI capabilities.\
\
\
\
[side note: On the Mac, for SC3.5 and earlier, you can press shift+cmd+N immediately to see a selection of the available GUI widgets.]\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Just in case you want to know more about the implementation:\
\
Because GUIs tend to be quite operating system specific, under the surface, there are different main GUI implementations available. \
\
From SC 3.6, the standard GUI library is qt. \
\
Historically, there are also OS X ('cocoa') specific classes (usually with prefix SC before the class names used here) and SwingOSC ('swing') Java cross platform classes (usually with prefix JSC). \
\
You can call the standard cross-platform GUI class names, like Slider, Window, View, without worrying about which of qt, Cocoa or SwingOSC is operative. \
\
\
Both qt and SwingOSC act like servers, sending and receiving messages from the language app. On OS X, a native Cocoa implementation is built into the standard language environment for SC3.5 and earlier. \
\
Test which GUI library you are using by default: \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 GUI\cf0 .current\
\
For more on this, see:\
[\cf3 GUI\cf0 ] \cf4 //main GUI help file\cf0 \
[\cf3 GUI\cf0 -\cf3 Classes\cf0 ] \cf4 //list of all GUI classes, with cross-  \cf0 \
\
Quick swap of implementation:\
\cf5 GUI\cf6 .cocoa	\cf7 //SC 3.5 and earlier on a Mac\cf6 \
\cf5 GUI\cf6 .swing	\cf7 //will only work if SwingOSC is installed, see instructions with SwingOSC\cf6 \
\
\cf7 //make sure SwingOSC server is running if you are using that, before you run any GUI code: \cf6 \
\cf5 SwingOSC\cf6 .default.boot\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
To make a window\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //The Rect(angle) takes the initial screen position and the window size\cf0 \
\cf4 //as screenx, screeny, windowwidth, windowheight, where screeny is 0 at the bottom\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  w;\
\
w=\cf3 Window\cf0 (\cf8 "My Window"\cf0 , \cf3 Rect\cf0 (100,500,200,200)); \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //A 200 by 200 window appears at screen co-ordinates (100, 500)\cf0 \
\
w.front; \cf4 //this line is needed to make the window actually appear\cf0 \
)\
\
Note that we count on the y axis from screen origin at bottom left, to the bottom left corner of the window.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
We add controls to our window, defining any parameters of their use. We pass in the window we wish the control to appear in and use a Rect again to specify where in the window the control will appear and how large it is. However, this time the co-ordinates are no longer relative to the screen, but relative to the top left corner of the window, and x and y positions indicate distance from left and from top respectively. \
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  w, slid;\
\
w=\cf3 Window\cf0 (\cf8 "My Window"\cf0 , \cf3 Rect\cf0 (100,500,200,100)); \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //A 200 by 100 window appears at screen co-ordinates (100, 500)\cf0 \
\
slid=\cf3 Slider\cf0 (w,\cf3 Rect\cf0 (10,10,180,40)); \cf4 //a basic slider object of size 180 by 40 appears 10 pixels in from the left, and 10 pixels down from the top\cf0 \
\
slid.action_(\{slid.value.postln;\}); \cf4 //this is the callback: the function is called whenever you move the slider. action_ means to set up the slider object to use the function passed in as its argument.\cf0 \
\
w.front;\
)\
\
Note how the default slider range is from 0.0 to 1.0\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
We might not want to create numbers from 0.0 to 1.0, but remap the value to other ranges. 0.0 to 1.0 is a very useful starting point, though. Try:\
\
1.0.rand	\cf4 //create a random number from 0.0 to 1.0\cf0 \
\
1.0.rand*50	\cf4 //create a random number from 0.0 to 1.0, and multiply it by 50 to get a new range from 0.0 to 50.0\cf0 \
\
1.0.rand*50+14.7	\cf4 //create a random number from 0.0 to 1.0, multiply it by 50, then add 14.7, to get a new range from 14.7 to 64.7\cf0 \
\
1.0.rand.linlin(0.0,1.0,14.7,64.71)	\cf4 //create a random number from 0.0 to 1.0, and use a built in function to remap it to the output range 14.7 to 64.71\cf0 \
\
1.0.rand.linexp(0.0,1.0,14.7,64.71) \cf4 //create a random number from 0.0 to 1.0, and use a built in function to remap it to the output range 14.7 to 64.71 with an exponential function, which tends to spend longer over lower values\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
\
\
\
\
\
\
 \
Rather than doing these remappings yourself, an alternative is to take advantage of a ControlSpec, a helpful class which can be used to turn input into any desired range through various available precanned mappings\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  w, slid, cs;\
\
w=\cf3 Window\cf0 (\cf8 "My Window"\cf0 , \cf3 Rect\cf0 (100,500,200,100)); \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //A 200 by 200 window appears at screen co-ordinates (100, 500)\cf0 \
\
slid=\cf3 Slider\cf0 (w,\cf3 Rect\cf0 (10,10,180,40));\
\
\cf4 //arguments minimum value, maximum value, warp (mapping function), stepsize, starting value \cf0 \
cs= \cf3 ControlSpec\cf0 (20, 20000, \cf2 \\exponential\cf0 , 10, 1000); \
\
slid.action_(\{cs.map(slid.value).postln;\}); \cf4 //map to the desired range\cf0 \
\
w.front;\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Given the action function for a GUI component, we can plug through to sound synthesis. Here we use the set command to modulate the control arguments of a running synth.  \
\
\cf4 //Demo of using 2D-Slider for synthesis\cf0 \
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 (\cf2 \\filterme\cf0 ,\{\cf3 arg\cf0  freq=1000, rq=0.5;    \cf4 //make sure there are control arguments to affect!\cf0 \
	\cf3 Out\cf0 .ar(0,\cf3 Pan2\cf0 .ar(\
		\cf3 BPF\cf0 .ar(\cf3 Impulse\cf0 .ar(\cf3 LFNoise0\cf0 .kr(15,500,1000),0.1, \cf3 WhiteNoise\cf0 .ar(2)),freq,rq)\
	))\
\}).add;\
)\
\
(\
\cf3 var\cf0  w, slid2d, syn;\
\
w=\cf3 Window\cf0 (\cf8 "My Window"\cf0 , \cf3 Rect\cf0 (100,300,200,200)); \
slid2d= \cf3 Slider2D\cf0 (w,\cf3 Rect\cf0 (5,5,175,175));\
\
syn=\cf3 Synth\cf0 (\cf2 \\filterme\cf0 );	\cf4 //create synth\cf0 \
\
slid2d.action_(\{	\
	[slid2d.x, slid2d.y].postln;\
	syn.set(\cf2 \\freq\cf0 ,100+(10000*slid2d.y),\cf2 \\rq\cf0 ,0.01+(0.09*slid2d.x));  \cf4 //I'm doing my own linear mapping here rather than use a ControlSpec\cf0 \
\});\
\
w.front;\
\
w.onClose=\{syn.free;\};	\cf4 //action which stops running synth when the window close button is pressed \cf0 \
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
If you want to arrange a bank of dials, for instance, you might use a helper class (a 'decorator') for arranging views on screen: \
\
Note: \
10@10  \cf4 //is the Point (10,10), an (x,y) co-ordinate position\cf0 \
\
\
(\
w= \cf3 Window\cf0 (\cf8 "decoration"\cf0 ,\cf3 Rect\cf0 (200,200,400,500));\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //set up decorator. FlowLayout needs to know the size of the parent window, the outer borders (10 pixels in on horizontal and vertical here) and the standard gap to space GUI views (20 in x, 20 in y)  \cf0 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 w.view.decorator= \cf3 FlowLayout\cf0 (w.view.bounds, 10@10, 20@20); \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //now, when GUI views are added to the main view, they are automatically arranged, and you only need to say how big each view is\cf0 \
k= Array.fill(10,\{\cf3 Knob\cf0 (w.view,100@100).background_(\cf3 Color\cf0 .rand)\});\
\
w.front; \cf4 //make GUI appear\cf0 \
)\
\
\cf4 //they were stored in an array, held in global variable k, so we can access them all easily via one variable\cf0 \
k[3].background_(\cf3 Color\cf0 .rand)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
However, maximum precision will come from specifying positions yourself. Make use of SuperCollider as a programming language to do this: \
\
\
(\
w= \cf3 Window\cf0 (\cf8 "programming it directly ourselves"\cf0 ,\cf3 Rect\cf0 (200,200,400,400));\
\
\cf4 //now, when GUI views are added to the main view, they are automatically arranged, and you only need to say how big each view is\cf0 \
k= \cf3 Array\cf0 .fill(16,\{\cf3 |i|\cf0  \cf3 Knob\cf0 (w,\cf3 Rect\cf0 ((i%4)*100+10,i.div(4)*100+10,80,80)).background_(\cf3 Color\cf0 .rand)\});\
\
\cf4 //if worried by the use of % for modulo and .div for integer division, try the code in isolation: \cf0 \
\cf4 //i.e., try out 5%4, and 5.div(4) as opposed to 5/4. How does this give the different grid positions as\cf0 \
\cf4 //argument i goes from 0 to 15? \cf0 \
\
w.front; \cf4 //make GUI appear\cf0 \
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
You can dynamically add and remove views from a window. \
\
Run these one at a time: \
\
w=\cf3 Window\cf0 ();\
\
w.front;	\cf4 //window appears\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Slider\cf0 (w,\cf3 Rect\cf0 (10,10,100,100));	\cf4 //slider appears straight away\cf0 \
\
w.view.children \cf4 //slider should be in the list, even though we didn't store any reference to the slider object in a global variable (like w) ourselves\cf0 \
\
w.view.children[0].remove \cf4 //nothing happens visually immediately\cf0 \
\
w.refresh; \cf4 //refresh updates the appearance of the window and the slider disappears\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ul \ulc0 For further explorations:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ulnone \
For demos of Drag and Drop and other UI facilities see the examples/GUI examples folder \
\
e.g., \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Document\cf0 .open(\cf8 "examples/GUI examples/GUI_examples1.scd"\cf0 ); \cf4 //on a Mac with SC3.5 or earlier this should open it straight away\cf0 \
\cf3 Document\cf0 .open(\cf8 "examples/GUI examples/GUI_examples2.scd"\cf0 ); \cf4 \
\
\cf6 Else for the ScIDE (3.6):\
\cf5 ScIDE\cf6 .open(\cf9 "examples/GUI examples/GUI_examples1.scd"\cf6 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 ScIDE\cf0 .open(\cf8 "examples/GUI examples/GUI_examples2.scd"\cf0 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
Warning: some examples may not use the more recent implementation free formulation, and involve different calls.  \
\
\
Drag and Drop demo:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // create a GUI window with some NumberBoxes.\
// You can command click on a control to drag its value to another control for cocoa, or control click for swing\
\cf3 var\cf0  w, n, f, s;\
w = \cf3 Window\cf0 (\cf8 "number box test"\cf0 , \cf3 Rect\cf0 (128, 64, 260, 80));\
w.view.decorator = f = \cf3 FlowLayout\cf0 (w.view.bounds);\
\
n = \cf3 NumberBox\cf0 (w, \cf3 Rect\cf0 (0,0,80,24));\
n.value = 123;\
\
n = \cf3 NumberBox\cf0 (w, \cf3 Rect\cf0 (0,0,80,24));\
n.value = 456;\
\
n = \cf3 DragBoth\cf0 (w, \cf3 Rect\cf0 (0,0,80,24));\
n.object = 789;\
\
f.nextLine;\
\
s = \cf3 Slider\cf0 (w, \cf3 Rect\cf0 (0,0,240,24));\
\
w.front;\
)
\fs36 \
\
\
\
There are also interesting help files for many other GUI objects. Note that there may be differences between 3.5 and 3.6 in what is available. \
\
(credit: many of the GUI objects were introduced into SuperCollider by Jan Trutzschler. for OS X originally)\
\
[\cf3 \ul MultiSliderView\cf0 \ulnone ] \cf4 //call the Help file\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf0 [\cf3 \ul EnvelopeView\cf0 \ulnone ]\cf3 \
\cf0 \
and some media viewing objects\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 [\ul SoundFileView\ulnone ]\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (\
w = \cf3 Window\cf0 .new(\cf8 "soundfile test"\cf0 , \cf3 Rect\cf0 (200, 200, 800, 400));\
a = \cf3 SoundFileView\cf0 (w, \cf3 Rect\cf0 (20,20, 700, 60));\
\
f = \cf3 SoundFile\cf0 .new;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 if(Main.versionAtLeast(3,5),\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 f.openRead(\cf8 Platform.resourceDir +/+ "sounds/a11wlk01.wav"\cf0 );\
\},\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 f.openRead(\cf8 "sounds/a11wlk01.wav"\cf0 );		\
\}); \
\
a.soundfile_(f);\
a.read(0, f.numFrames);\
\
a.gridOn_(\cf3 false\cf0 );\
\
w.front;\
)
\fs36 \cf3 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 There is a MovieView too, but it doesn't work particularly well. 
\fs18 \

\fs36 \
\
There are screen drawing facilities using the Pen class\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
(\cf6 \
\cf5 var\cf6  w, h = 400, v = 400, seed = \cf5 Date\cf6 .seed, run = \cf5 true\cf6 ;\
w = \cf5 Window\cf6 (\cf9 "subdiv"\cf6 , \cf5 Rect\cf6 (40, 40, h, v));\
w.view.background = \cf5 Color\cf6 .rand;\
w.onClose = \{ run = \cf5 false\cf6  \};\
w.front;\
\cf7 //for SC3.4 or earlier, use drawHook\cf6 \
w.drawFunc = \{ \cf5 var\cf6  done, nextx, nexty, yellowness, penwidth;\
\
nextx=0;\
nexty=0;\
yellowness=rrand(0.0,1.0);\
\
penwidth=rrand(0.5,1.5);\
\
\cf7 //done=0;\cf6 \
	\cf5 Pen\cf6 .use \{\
\
		200.do(\{\cf5 arg\cf6  i; \
		\cf5 var\cf6  lastx,lasty;\
		lastx=nextx;\
		lasty=nexty;\
		\
		nextx=nextx+rrand(1,20);\
		nexty=nexty+rrand(1,40);\
		\
		if(nextx>=h, \{nextx=nextx%h\});\
		if(nexty>=v, \{nexty=nexty%v\});\
		\
		penwidth=(penwidth+(0.2.rand2))%8.0;\
		\
		\cf5 Pen\cf6 .width= penwidth;\
				\
		yellowness= (yellowness+(0.1.rand2))%2.0;\
		\
		\cf5 Color\cf6 .yellow(yellowness).set;\
	\
		\cf5 Pen\cf6 .beginPath;\
		\cf5 Pen\cf6 .line(\cf5 Point\cf6 (lastx,lasty),\cf5 Point\cf6 (nextx,nexty));\
		\cf5 Pen\cf6 .rotate(rand(i%40));\
		\cf5 Pen\cf6 .line(\cf5 Point\cf6 (lastx,lasty),\cf5 Point\cf6 (nextx,nexty));\
		\cf5 Pen\cf6 .rotate(rand(i%40));\
		\cf5 Pen\cf6 .line(\cf5 Point\cf6 (lastx,lasty),\cf5 Point\cf6 (nextx,nexty));\
		\cf5 Pen\cf6 .rotate(rand(i%40));\
		\cf5 Pen\cf6 .line(\cf5 Point\cf6 (lastx,lasty),\cf5 Point\cf6 (nextx,nexty));\
			\cf5 Pen\cf6 .stroke;\
	\
		\cf7 //Pen.fillRect(Rect(h.rand,v.rand,rrand(1,50),rrand(1,50)))\cf6 \
		\
		\});\
	\};\
		\
\};\
\
\cf7 //\{ while \{ run \} \{ w.refresh; 3.wait; \} \}.fork(AppClock)\cf6 \
\
\cf0 )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf0 \
Which you could use for text manipulation as well...\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  linetext, drawletter;\
\cf3 var\cf0  w, h = 800, v = 60, seed = \cf3 Date\cf0 .seed, run = \cf3 true\cf0 ;\
\cf3 var\cf0  time, name, sourcestring;\
\cf3 var\cf0  yellowness, penwidth;\
\
\cf4 //name=[\\s,\\u,\\p,\\e,\\r,\\c,\\o,\\l,\\l,\\i,\\d,\\e,\\r];\cf0 \
\
\cf4 //sourcestring= "any lower case text";\cf0 \
\
sourcestring= \cf8 "welcome to supercollider"\cf0 ;\
\
name=\cf3 Array\cf0 .fill(sourcestring.size,\{\cf3 arg\cf0  i; sourcestring[i].asSymbol\});\
\
\
time=0;\
\
linetext= (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 'a'\cf0 :[[[0,1],[0.5,0]],[[0.5,0],[1,1]],[[0.25,0.5],[0.75,0.5]]],\
\cf2 'b'\cf0 :[[[0,1],[0,0]],[[0,1],[1,1]],[[0,0],[1,0]],[[0,0.5],[0.75,0.5]],[[0.75,0.5],[1,0.75]],[[0.75,0.5],[1,0.25]],[[1,0.75],[1,1]],[[1,0.25],[1,0]]],\
\cf2 'c'\cf0 :[[[0,1],[0,0]],[[0,0],[1,0]],[[0,1],[1,1]]],\
\cf2 'd'\cf0 :[[[0,1],[0,0]],[[0,0],[0.75,0]],[[0,1],[0.75,1]],[[0.75,1],[1,0.75]],[[0.75,0],[1,0.25]],[[1,0.25],[1,0.75]]],\
\cf2 'e'\cf0 :[[[0,0],[0,1]],[[0,0],[1,0]],[[0,1],[1,1]],[[0,0.5],[1,0.5]]],\
\cf2 'f'\cf0 :[[[0,0],[0,1]],[[0,0],[1,0]],[[0,0.5],[1,0.5]]],\
\cf2 'g'\cf0 :[[[0,1],[0,0]],[[0,0],[1,0]],[[0,1],[1,1]],[[1,1],[1,0.5]],[[0.5,0.5],[1,0.5]]],\
\cf2 'h'\cf0 :[[[0,1],[0,0]],[[0,0.5],[1,0.5]],[[1,1],[1,0]]],\
\cf2 'i'\cf0 :[[[0,0],[1,0]],[[0.5,0],[0.5,1]],[[0,1],[1,1]]],\
\cf2 'j'\cf0 :[[[0,0],[1,0]],[[0.5,0],[0.5,1]],[[0,1],[0.5,1]]],\
\cf2 'k'\cf0 :[[[0,1],[0,0]],[[0,0.5],[1,1]],[[0,0.5],[1,0]]],\
\cf2 'l'\cf0 :[[[0,1],[0,0]],[[0,1],[1,1]]],\
\cf2 'm'\cf0 :[[[0,1],[0,0]],[[0,0],[0.5,0.5]],[[0.5,0.5],[1,0]],[[1,0],[1,1]]],\
\cf2 'n'\cf0 :[[[0,1],[0,0]],[[0,0],[1,1]],[[1,1],[1,0]]],\
\cf2 'o'\cf0 :[[[0,1],[0,0]],[[0,0],[1,0]],[[0,1],[1,1]],[[1,0],[1,1]]],\
\cf2 'p'\cf0 :[[[0,0],[0,1]],[[0,0],[1,0]],[[0,0.5],[1,0.5]],[[1,0],[1,0.5]]],\
\cf2 'q'\cf0 :[[[0,0],[0,0.75]],[[0,0],[0.75,0]],[[0,0.75],[0.75,0.75]],[[0.75,0],[0.75,0.75]],[[0.5,0.5],[1,1]]],\
\cf2 'r'\cf0 :[[[0,0],[0,1]],[[0,0],[1,0]],[[0,0.5],[1,0.5]],[[1,0],[1,0.5]],[[0,0.5],[1,1]]],\
\cf2 's'\cf0 :[[[0,0],[0,0.5]],[[0,0],[1,0]],[[0,1],[1,1]],[[0,0.5],[1,0.5]],[[1,0.5],[1,1]]],\
\cf2 't'\cf0 :[[[0,0],[1,0]],[[0.5,0],[0.5,1]]],\
\cf2 'u'\cf0 :[[[0,1],[0,0]],[[0,1],[1,1]],[[1,0],[1,1]]],\
\cf2 'v'\cf0 :[[[0,0],[0.5,1]],[[0.5,1],[1,0]]],\
\cf2 'w'\cf0 :[[[0,0],[0.25,1]],[[0.25,1],[0.5,0.5]],[[0.5,0.5],[0.75,1]],[[0.75,1],[1,0]]],\
\cf2 'x'\cf0 :[[[0,0],[1,1]],[[0,1],[1,0]]],\
\cf2 'y'\cf0 :[[[0,0],[0.5,0.5]],[[0.5,0.5],[1,0]],[[0.5,0.5],[0.5,1]]],\
\cf2 'z'\cf0 :[[[0,1],[1,0]],[[0,0],[1,0]],[[0,1],[1,1]]],\
(\cf8 " "\cf0 .asSymbol):[[[0,1],[1,1]],[[0,0.8],[0,1]],[[1,0.8],[1,1]]]\
);\
\
w = \cf3 Window\cf0 (\cf8 "welcome"\cf0 , \cf3 Rect\cf0 (40, 500, h, v));\
w.view.background = \cf3 Color\cf0 .blue(0.5);\
w.onClose = \{ run = \cf3 false\cf0  \};\
w.front;\
\
drawletter=\{\cf3 arg\cf0  which, startx, starty, xscale=100, yscale,prop=1.0;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  data;\
\
yscale= yscale ? xscale;\
\
data= linetext[which];\
\
prop=(round((data.size)*prop).asInteger).max(1);\
\
prop.do(\{\cf3 arg\cf0  i;\
\cf3 var\cf0  val=data[i];\
\
\cf3 Pen\cf0 .beginPath;\
\cf3 Pen\cf0 .line(\cf3 Point\cf0 (startx+(xscale*val[0][0]),starty+(yscale*val[0][1])),\cf3 Point\cf0 (startx+(xscale*val[1][0]),starty+(yscale*val[1][1])));\
\cf3 Pen\cf0 .stroke;\
\
\});\
\
\};\
\
\
yellowness=rrand(0.7,0.9);\
\
penwidth=rrand(2,3);\
\
w.drawFunc = \{\
\
	\cf3 Pen\cf0 .use \{\cf3 var\cf0  xoscil, xsizoscil,yoscil, todraw, usedtime;\
\
		\cf3 Pen\cf0 .width= penwidth;\
		\cf3 Color\cf0 .yellow(yellowness).set;\
		\
		usedtime=time.min(1.0);\
	\
		todraw=(round((name.size)*usedtime).asInteger).max(1);\
		\
		todraw.do(\{\cf3 arg\cf0  j;\
		\
		xoscil= sin(2*pi*time+(j*pi*0.13))*140/(1+(10*time));\
		\
		yoscil= sin(2*pi*time+(j*pi*0.03))*200/(1+(200*time));\
		\
		xsizoscil= time*5+5;\
		\
		drawletter.value(name[j],50+(25*j)+(xoscil),10+yoscil,xsizoscil,xsizoscil,usedtime);\
		\
		\});\
		\
	\};\
		\
		\
\};\
\
\{ while \{ time<2.0 \} \{ \
\
w.refresh; 		\
time=(time+0.025); \cf4 //%2.0;\cf0 \
0.05.wait; \} \}.fork(\cf3 AppClock\cf0 )\
\
\
\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf0 \
\
If you're on OS X before SC3.6, also see SCImage for many image processing capabilities, such as placing an image into the background of your GUI window, or adding a logo. \
\
}