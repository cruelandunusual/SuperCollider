{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red191\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs48 \cf0 The Human Voice \
\
\
\
\
Use internal server:\
\
\cf2 Server\cf0 .default= s= \cf2 Server\cf0 .internal\
\
\
\
The voice can be considered as a source and filter system where the source is a periodic oscillation at the vocal folds (for vowel like sounds), or aperiodic air turbulence (for consonantal sounds). \
\
So the simplest models might look like :\
\
\
(\
\cf2 SynthDef\cf0 (\cf3 \\voicesound1\cf0 ,\{\cf2 |voiced=1 freq=440 amp=0.1|\cf0 \
\cf2 var\cf0  source, filter; \
\
\cf4 //flag for voiced (periodic) or unvoiced (aperiodic, noise source)\cf0 \
\
source = if(voiced,\cf2 Impulse\cf0 .ar(freq),\cf2 WhiteNoise\cf0 .ar(0.2));\
\
filter= \cf2 BLowPass\cf0 .ar(\cf2 BPF\cf0 .ar(source,2000,0.1, source),4000, 0.25,100); \cf4 //add a boost to source around 2000 Hz, and also low pass overall\cf0 \
 \
\cf2 Out\cf0 .ar(0,amp*filter.dup)\
\}).add\
)\
\
a= \cf2 Synth\cf0 (\cf3 \\voicesound1\cf0 )\
\
a.set(\cf3 \\voiced\cf0 , 0)\
\
\
However, this doesn't yet sound even slightly convincing. \
\
\
\
\
\
\
\
One necessary complication is in the filtering. Our nose and throat is a complex system, with many independent muscle groups acting to control the position of tongue, lips, air spaces and relative flow into the nose. In order to make more convincing syntheses, we need better filter data. Each phone (distinct sound which the voice can create) has particular physical settings, and associated filtering. \
\
One way of modeling the filtering is to look at important peaks and troughs in the frequency spectrum of a given sound; we model the spectral envelope. The major peaks are called the formants, and for a vowel or voiced consonant there tend to be up to five major peaks. Formant data varies between voice types, but charts are available (one table of formants is available here: \cf4 http://ecmc.rochester.edu/onlinedocs/Csound/Appendices/table3.html\cf0 ) \
\
\
formant positions: \
\pard\pardeftab560\ql\qnatural
\cf4 //soprano 'a' sound, direct additive synthesis, one source per formant \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 (\
\cf2 SynthDef\cf0 (\cf3 \\voicesound2\cf0 ,\{\cf2 |voiced=1 freq= 440 amp=0.1|\cf0  \
\pard\pardeftab560\ql\qnatural
\cf2 var\cf0  formantfreqs, formantamps, formantbandwidths; \cf4 //data for formants\cf0 \
\cf2 var\cf0  output; \
\
formantfreqs= [800,1150,2900,3900,4950]; \cf4 //centre frequencies of formants\cf0 \
formantamps= ([0 ,-6,-32,-20,-50]-6).dbamp; \cf4 //peaks of formants\cf0 \
formantbandwidths=[80,90,120,130,140];  \cf4 //bandwidths\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
output= \cf2 Mix\cf0 (\cf2 SinOsc\cf0 .ar(formantfreqs,0,formantamps))*amp; \
\
\cf2 Out\cf0 .ar(0,output.dup)\
\}).play\
)\
\pard\pardeftab560\ql\qnatural
\cf4 \
\
//soprano 'a' sound, subtractive synthesis, pass source waveform through formant filtering \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 (\
\cf2 SynthDef\cf0 (\cf3 \\voicesound3\cf0 ,\{\cf2 |voiced=1 freq= 440 amp=0.1|\cf0  \
\pard\pardeftab560\ql\qnatural
\cf2 var\cf0  formantfreqs, formantamps, formantbandwidths; \cf4 //data for formants\cf0 \
\cf2 var\cf0  source, output; \
\
formantfreqs= [800,1150,2900,3900,4950]; \cf4 //centre frequencies of formants\cf0 \
formantamps= ([0 ,-6,-32,-20,-50]-6).dbamp; \cf4 //peaks of formants\cf0 \
formantbandwidths=[80,90,120,130,140];  \cf4 //bandwidths\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 source = if(voiced,\cf2 Impulse\cf0 .ar(freq),\cf2 WhiteNoise\cf0 .ar(0.2));\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 \
output= \cf2 Mix\cf0 (\cf2 BPF\cf0 .ar(source, formantfreqs,formantbandwidths/formantfreqs,formantamps))*10*amp; \
\
\cf2 Out\cf0 .ar(0,output.dup)\
\}).add\
)\cf4 \
\pard\pardeftab560\ql\qnatural
\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 a= \cf2 Synth\cf0 (\cf3 \\voicesound3\cf0 )\
\
a.set(\cf3 \\voiced\cf0 , 0)\
\
\
\
\cf4 //viewing through the frequency scope, humps in the spectrum are visible; note how the Whitenoise is too noisy, and the impulse sound too pure a chain of harmonics! \cf0 \
\
FreqScope.new\
\
\
\pard\pardeftab560\ql\qnatural
\cf4 \
//let's tweak things by adding in some more complicated sources with vibrato: \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 (\
\cf2 SynthDef\cf0 (\cf3 \\voicesound4\cf0 ,\{\cf2 |voiced=1 freq= 440 amp=0.1|\cf0  \
\pard\pardeftab560\ql\qnatural
\cf2 var\cf0  formantfreqs, formantamps, formantbandwidths; \cf4 //data for formants\cf0 \
\cf2 var\cf0  periodicsource, aperiodicsource, source, output; \
\cf2 var\cf0  vibrato; \
\cf2 var\cf0  vibratonoise= \cf2 LFNoise1\cf0 .kr(10); \
\
formantfreqs= [800,1150,2900,3900,4950]; \cf4 //centre frequencies of formants\cf0 \
formantamps= ([0 ,-6,-32,-20,-50]-6).dbamp; \cf4 //peaks of formants\cf0 \
formantbandwidths=[80,90,120,130,140];  \cf4 //bandwidths\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 \
\pard\pardeftab560\ql\qnatural
\cf4 //with vibrato up to quartertone, rate of vibrato around 6+-1 Hz\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf4 //calculate vibrato in midi note (log frequency) domain; final .midicps takes it back to frequency\cf0 \
\cf4 //line generator delays onset of vibrato like a real singer\cf0 \
vibrato= ((freq.cpsmidi)+(\cf2 Line\cf0 .kr(0.0,1.0,2.5)*\cf2 SinOsc\cf0 .kr(6+(1.0*vibratonoise),0,0.5))).midicps; \
\
//\cf4  low pass filter on Impulse to avoid high harmonics making it too bright\cf0 \
periodicsource= \cf2 LPF\cf0 .ar(\cf2 Impulse\cf0 .ar(vibrato),5000);\
\
\cf4 //pink noise drops off as frequency increases at -dB per octave,\cf0 \
aperiodicsource= \cf2 PinkNoise\cf0 .ar(0.7);\
\
\cf4 //take now as mixture of periodic and aperiodic\cf0 \
source= (voiced*periodicsource)+((1.0-voiced)*aperiodicsource); \
\
output= \cf2 Mix\cf0 (\cf2 BPF\cf0 .ar(source, formantfreqs,formantbandwidths/formantfreqs,formantamps))*100*amp; \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf2 Out\cf0 .ar(0,output.dup)\
\}).add\
)\cf4 \
\pard\pardeftab560\ql\qnatural
\cf4 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 a= \cf2 Synth\cf0 (\cf3 \\voicesound4\cf0 )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf4 //can now set to intermediate mixes of vowel and consonant \cf0 \
a.set(\cf3 \\voiced\cf0 , 0.8)\
\pard\pardeftab560\ql\qnatural
\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\
For further realism, might modulate subtly the formant data, and experiment with other source waveforms than the impulse\
\
\pard\pardeftab560\ql\qnatural
\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 (\
\cf2 SynthDef\cf0 (\cf3 \\voicesound5\cf0 ,\{\cf2 |voiced=1 freq= 440 amp=0.1|\cf0  \
\pard\pardeftab560\ql\qnatural
\cf2 var\cf0  formantfreqs, formantamps, formantbandwidths; \cf4 //data for formants\cf0 \
\cf2 var\cf0  periodicsource, aperiodicsource, source, output; \
\cf2 var\cf0  vibrato; \
\cf2 var\cf0  vibratonoise= \cf2 LFNoise1\cf0 .kr(10); \
\
formantfreqs= [800,1150,2900,3900,4950]; \cf4 //centre frequencies of formants\cf0 \
formantamps= ([0 ,-6,-32,-20,-50]-6).dbamp; \cf4 //peaks of formants\cf0 \
formantbandwidths=[80,90,120,130,140];  \cf4 //bandwidths\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 \
\pard\pardeftab560\ql\qnatural
\cf4 //with vibrato up to quartertone, rate of vibrato around 6+-1 Hz\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf4 //calculate vibrato in midi note (log frequency) domain; final .midicps takes it back to frequency\cf0 \
\cf4 //line generator delays onset of vibrato like a real singer\cf0 \
vibrato= ((freq.cpsmidi)+(\cf2 Line\cf0 .kr(0.0,1.0,2.5)*\cf2 SinOsc\cf0 .kr(6+(1.0*vibratonoise),0,0.5))).midicps; \
\
\cf4 // low pass filter to avoid high harmonics making it too bright\cf0 \
periodicsource= \cf2 LPF\cf0 .ar(\cf2 Pulse\cf0 .ar(vibrato,\cf2 LFNoise2\cf0 .kr(\cf2 LFNoise1\cf0 .kr(1,0.25,0.5),0.1,0.5)),5000);\
\
\cf4 //pink noise drops off as frequency increases at -dB per octave,\cf0 \
aperiodicsource= \cf2 PinkNoise\cf0 .ar(0.7);\
\
\cf4 //take now as mixture of periodic and aperiodic\cf0 \
source= (voiced*periodicsource)+((1.0-voiced)*aperiodicsource); \
\
output= \cf2 Mix\cf0 (\cf2 BPF\cf0 .ar(source, formantfreqs,(formantbandwidths+\cf2 LFNoise2\cf0 .kr(\cf2 LFNoise1\cf0 .kr(1,0.5,4),10))/formantfreqs,formantamps))*100*amp; \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf2 Out\cf0 .ar(0,output.dup)\
\}).add\
)\cf4 \
\pard\pardeftab560\ql\qnatural
\cf4 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 a= \cf2 Synth\cf0 (\cf3 \\voicesound5\cf0 )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf4 //can now set to intermediate mixes of vowel and consonant \cf0 \
a.set(\cf3 \\voiced\cf0 , 0.7)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\
\
\
\
\
\
Let's take a moment to look at the formants in our own voices\
\
\{\cf2 SoundIn\cf0 .ar\}.play\
\
\
To best analyse these over time, hold a stable mouth shape and pitch (sing 'ah' at a comfortable and stable pitch) and look for peaks in the spectrogram (which should stay relatively stable since you are holding stable, give or take some slight noise due to the character of your own voice).  \
\
\
\
\
\
\
\
\
\
There are some UGens in SuperCollider which assist in synthesising formants, that is, prominent energy peaks above a fundamental frequency. \
\
\
[\cf2 Formlet\cf0 ]\
\
Formlet is a filter which imposes a resonance at a specified frequency. The filter has a similar response to a classical method of synthesising formant waveforms called Fonction d'onde formantique (FOF) as used in IRCAM's Chant synthesiser from the 1980s (see the Roads Computer Music Tutorial, or http://www-ccrma.stanford.edu/~serafin/320/lab3/FOF_synthesis.html, for example) \
\
single formant: \
\
\pard\pardeftab560\ql\qnatural
\cf0 \{ \cf2 Formlet\cf0 .ar(\cf2 Impulse\cf0 .ar(440, 0.5,0.1),\cf2 MouseX\cf0 .kr(300,3000,\cf3 'exponential'\cf0 ), 0.01, \cf2 MouseY\cf0 .kr(0.1,1.0,\cf3 'exponential'\cf0 )) \}.play;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\
used for voice synthesis: \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 (\
\cf2 SynthDef\cf0 (\cf3 \\voicesound6\cf0 ,\{\cf2 |voiced=1 freq= 440 amp=0.1 resonancescaling=5|\cf0  \
\pard\pardeftab560\ql\qnatural
\cf2 var\cf0  formantfreqs, formantamps, formantbandwidths; \cf4 //data for formants\cf0 \
\cf2 var\cf0  periodicsource, aperiodicsource, source, output; \
\cf2 var\cf0  vibrato; \
\cf2 var\cf0  vibratonoise= \cf2 LFNoise1\cf0 .kr(10); \
\
formantfreqs= [800,1150,2900,3900,4950]; \cf4 //centre frequencies of formants\cf0 \
formantamps= ([0 ,-6,-32,-20,-50]-6).dbamp; \cf4 //peaks of formants\cf0 \
formantbandwidths=[80,90,120,130,140];  \cf4 //bandwidths\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 \
\pard\pardeftab560\ql\qnatural
\cf4 //with vibrato up to quartertone, rate of vibrato around 6+-1 Hz\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf4 //calculate vibrato in midi note (log frequency) domain; final .midicps takes it back to frequency\cf0 \
\cf4 //line generator delays onset of vibrato like a real singer\cf0 \
vibrato= ((freq.cpsmidi)+(\cf2 Line\cf0 .kr(0.0,1.0,2.5)*\cf2 SinOsc\cf0 .kr(6+(1.0*vibratonoise),0,0.5))).midicps; \
\
\cf4 // low pass filter on Impulse to avoid high harmonics making it too bright\cf0 \
periodicsource= \cf2 LPF\cf0 .ar(\cf2 Impulse\cf0 .ar(vibrato),5000);\
\
\cf4 //pink noise drops off as frequency increases at -dB per octave,\cf0 \
aperiodicsource= \cf2 PinkNoise\cf0 .ar(0.7);\
\
\cf4 //take now as mixture of periodic and aperiodic\cf0 \
source= (voiced*periodicsource)+((1.0-voiced)*aperiodicsource); \
\
\cf4 //the decaytime of the formlet is the filter's resonant decay time; a small bandwidth corresponds to a long decay (a 'ringing' filter). So I take the reciprocal of the formant bandwidth as an estimate of decaytime here, multiplied by a scaling factor for degree of resonance\cf0 \
output= \cf2 Mix\cf0 (\cf2 Formlet\cf0 .ar(source, formantfreqs, 0.001, resonancescaling*formantbandwidths.reciprocal, formantamps))*10*amp; \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf2 Out\cf0 .ar(0,output.dup)\
\}).add\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\pard\pardeftab560\ql\qnatural
\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 a= \cf2 Synth\cf0 (\cf3 \\voicesound6\cf0 )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf4 //can now set to intermediate mixes of vowel and consonant \cf0 \
a.set(\cf3 \\voiced\cf0 , 0.9)\
a.set(\cf3 \\resonancescaling\cf0 , 20)\
a.set(\cf3 \\resonancescaling\cf0 , 2)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\
\
It is also possible to get formant like bulges in a sound's spectrum above the fundamental frequency, by using hard sync type oscillators. One variant from the late 1970s is called VOSIM and a simulation UGen is available in the sc3-plugins pack. It is also possible to create hard sync via some UGens like SyncSaw or just by retriggering an envelope used as a waveform. In these settings, the attributes of the source which is getting retriggered with each hard sync signal is critical in determining the spectral content.  \
\
\
  \
  \
  \
  \
  \
  \
  \
  \
  \
  \
  \
The dual to synthesis is analysis, as already alluded to from our spectral examination of the voice above. There are various voice analysis methods which have been developed in speech telecommunications, which are of use in analyzing the singing voice and other instruments.  \
\
A classic technique is 
\b vocoding
\b0  (voice encoding). A set of band pass filters is used in analysis of an original sound (tracking amplitude), and another similar bank of filters are used in resynthesis acting on a (typically simpler) source sound, modulated by the amplitude. In the basic implementation, the filter parameters are fixed in advance and not themselves input signal dependent. The method allows compression for telecommunications if the rate at which amplitudes are taken (window size) is smaller than the size of the filterbank itself. \
 \
\
An example should make this clearer:\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 (\
\cf2 SynthDef\cf0 (\cf3 \\vocoder\cf0 ,\{\cf2 |freq=200 voiced=1 amp=4|\cf0 \
\pard\pardeftab560\ql\qnatural
\cf2 var\cf0  centrefreqs, amps, bandwidths, rq; \cf4 //data for formants\cf0 \
\cf2 var\cf0  analysissignal, synthesissignal, periodicsource, aperiodicsource; \
\cf2 var\cf0  analysisfilters, synthesisfilters; \
\
centrefreqs= (1..10)*440; \cf4 //choose centre frequencies\cf0 \
amps= (0.dup(10)).dbamp; \
bandwidths= \cf4 300.dup(10); //\cf0 (1..10)*200; \cf4  //bandwidths\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 rq= bandwidths/centrefreqs;	\cf4 //reciprocal of q; bandwidth/centrefreq\cf0 \
\
analysissignal= \cf2 SoundIn\cf0 .ar; \cf4 //analyze audio input on machine\cf0 \
\
periodicsource=\cf2 Saw\cf0 .ar(freq); \cf4 \
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf4 //pink noise drops off as frequency increases at -dB per octave,\cf0 \
aperiodicsource= \cf2 PinkNoise\cf0 .ar(0.7);\
\
\cf4 //take now as mixture of periodic and aperiodic\cf0 \
\pard\pardeftab560\ql\qnatural
\cf0 synthesissignal= (voiced*periodicsource)+((1.0-voiced)*aperiodicsource); \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf4 //do the analysis in the specified bands, finding the amplitude in each band\cf0 \
\pard\pardeftab560\ql\qnatural
\cf0 analysisfilters = \cf2 Amplitude\cf0 .kr(\cf2 BPF\cf0 .ar(analysissignal, centrefreqs, rq));\
\
\pard\pardeftab560\ql\qnatural
\cf4 //modulate bandwise the resynthesis\cf0 \
synthesisfilters = analysisfilters*\cf2 BPF\cf0 .ar(synthesissignal, centrefreqs, rq);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf4 //amp compensates for energy lost by filters\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf2 Out\cf0 .ar(0,(amp*\cf2 Mix\cf0 (synthesisfilters)).dup)\
\}).add\
)\
\
\pard\pardeftab560\ql\qnatural
\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 a= \cf2 Synth\cf0 (\cf3 \\vocoder\cf0 )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
a.set(\\freq, 100)\
\
a.set(\cf3 \\voiced\cf0 , 0.2)\
\
\
\cf4 //you can swap in other sources, filters, make the effects time varying and generally energise the sound. \cf0 \
\
(also see work by Josh Parmenter in his sc3-plugins packs; Vocoder, Vocode and VocodeBand classes).  \
\
\
\
Analysis methods must attempt to model the (changing) spectral envelope of a sound, and each must choose a compromise between following all the (noisy) detail in the spectrum, and approximating it (finding formant areas). They are generally useful beyond the voice, in that they are a way of picking up on timbral characteristics of sounds, and designing a filter which has a spectral response like a given sound. \
\
Two classic methods to mention here are: \
LPC = Linear Predictive Coding  \
MFCC = Mel Frequency Cepstral Coefficients \
\
Some SC UGens to explore these: \
\cf2 LPCAnalyzer\cf0  \cf4 //in the NCAnalysis sc3-plugins extension; also some LPC resynthesis UGens work by Josh Parmenter in his own sc3-plugins set\cf0 \
\cf2 MFCC\cf0  \cf4 //in core\cf0 \
\
\
Note that with vibrato, the spectral envelope stays fixed, and the harmonics of the periodic source change amplitude, mapping out the spectral envelope pattern. So vibrato can assist in hearing out formants associated with a particular vowel sound (Xavier Rodet and Diemo Schwarz. "Spectral envelopes and additive+residual analysis/synthesis". In James Beauchamp, editor. Analysis, Synthesis and Perception of Musical Sounds. Springer, New York, NY, 2007, pages 175\'96227.)\
\
\
\
\
High quality singing voice synthesis (i.e., Vocaloid) is acheived using large pre-analyzed databases of voice phones and diphones (transitions between two phones). These are strung together as required, a form of "concatenative synthesis". In general, singing voice synthesis remains a challenging problem in computer music.  \
\
\
\
\
\
\
}