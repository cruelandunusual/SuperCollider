{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green115\blue0;\red0\green0\blue191;\red0\green0\blue191;
\red0\green0\blue0;\red96\green96\blue96;\red191\green0\blue0;\red191\green0\blue0;\red96\green96\blue96;
\red249\green48\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf2 Buffers and Sound Files\
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Server\cf0 .default=s=\cf3 Server\cf0 .local;\
s.boot;\
\
To do sample playback and manipulation, for streaming files off disk, for recording and wavetables and many other processes, it is necessary to handle memory buffers on the Server. \
\
Note: SuperCollider versions from 3.5 on have the default sound files that come with SuperCollider in a different location. You will see the path as: \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf4 Platform\cf5 .resourceDir +/+ \cf6 "sounds/a11wlk01.wav"\cf5  \cf7 //3.5 or later\cf5 \
\
Which is the version used in the examples in these tutorials. If you are on 3.4 or earlier, the correct path is just: \
\cf6 "sounds/a11wlk01.wav"\cf5 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
Note that if you need a path for a sound file, you can drag and drop to the text window in SuperCollider to get the path. \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
There are 1024 individual buffers by default. The Buffer memory is allocated as needed from the operating system.\
\
(Advanced: You can check defaults by looking at the ServerOptions class and Main:startup. The Buffer memory is not the memSize option; memSize is just some reserved memory for use by plug-ins like delay lines. So you should still set memSize big because UGens like CombN or DelayN need to use it for their allocations.  \
) \
\
We'll deal with buffers using the convenience wrapper class appropriately called Buffer.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 //allocate a one channel buffer of 441000 sample frames (10 sec at standard sampling rate)\cf0 \
b=\cf3 Buffer\cf0 .alloc(s, 10*44100, 1);  \cf8 // s= server, 10*44100 num frames, 1 = 1 channel, i.e. mono\cf0 \
\
If you check scsynth's memory use in your operating system (e.g., for OS X use the Terminal with the top command or Activity Monitor) before and after running this line (top command would work) you should see it has gone up.\
\
b.bufnum 	\cf8 //which buffer are we using? This is an essential parameter to pass to lots of UGens\cf0 \
\
\cf8 //restore that memory and free that bufferID\cf0 \
b.free\
\
To prepare buffers for playback by loopers or disk streamers, there are other methods of the Buffer class you'll see called. \
\
To work with sample playback there are a variety of possible UGens to use.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
PlayBuf\
\
(\
\cf8 //this loads into a buffer the default sound that comes with SuperCollider\cf0 \
\cf8 //.read brings in the whole sound at once\cf0 \
b = \cf3 Buffer\cf0 .read(s,\cf4 Platform\cf5 .resourceDir +/+ \cf9 "sounds/a11wlk01.wav"\cf0 ); \cf8 //store handle to Buffer in global variable b\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 (\cf9 "playbuf"\cf0 ,\{ \cf3 arg\cf0  out=0,bufnum=0, rate=1, trigger=1, startPos=0, loop=1;\
	\cf3 Out\cf0 .ar(out,\
		\cf3 Pan2\cf0 .ar(\cf3 PlayBuf\cf0 .ar(1,bufnum, \cf3 BufRateScale\cf0 .kr(bufnum)*rate, trigger, \cf3 BufFrames\cf0 .ir(bufnum)*startPos, loop),0.0)\
	)\
\}).add; \
)\
\
BufRateScale is vital because the soundfile I've loaded is actually at 11025Hz sampling rate, and my audio output is at 44100Hz - so it adjusts for different possible sampling rates. The BufFrames UGen returns, well, the number of frames in the soundfile. But note the .ir - this is initialisation rate, i.e., the UGen only runs once when first created, it doesn't need to be continually recalculated.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 //note how even though the soundfile doesn't loop, the Synth is not deallocated when done\cf0 \
\cf8 //(it has no envelope function). you'll need to cmd+period to kill it  \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Synth\cf0 (\cf2 \\playbuf\cf0 , [\cf2 \\out\cf0 , 0, \cf2 \\bufnum\cf0 , b.bufnum]);\
 \
 \cf8 //play at half rate\cf0 \
\cf3 Synth\cf0 (\cf2 \\playbuf\cf0 , [\cf2 \\out\cf0 , 0, \cf2 \\bufnum\cf0 , b.bufnum, \cf2 \\rate\cf0 , 0.5]);\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 //Example with GUI controlling Synth \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  w, rateslid, trigslid, startposslid, loopslid, a; \
\
a=\cf3 Synth\cf0 (\cf2 \\playbuf\cf0 , [\cf2 \\out\cf0 , 0, \cf2 \\bufnum\cf0 , b.bufnum]);\
\
w=\cf3 Window\cf0 (\cf9 "PlayBuf Example"\cf0 ,\cf3 Rect\cf0 (10,200,300,150));\
\
w.front;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 //control positioning of new GUI elements so I don't have to think too hard about it\cf0 \
w.view.decorator= \cf3 FlowLayout\cf0 (w.view.bounds);\
\
\cf8 //James' shortcut slider class\cf0 \
\cf8 //250@24 means a Point of size 250 by 24\cf0 \
\cf8 //|ez| is the same as arg ez;  - the EZSlider object is being passed into the callback action function\cf0 \
rateslid= \cf3 EZSlider\cf0 (w, 250@24, \cf9 "Rate"\cf0 , \cf3 ControlSpec\cf0 (0.5, 10, \cf2 'exponential'\cf0 , 0.1), \{\cf3 |ez|\cf0  a.set(\cf2 \\rate\cf0 ,ez.value)\}, 1);\
\
trigslid= \cf3 EZSlider\cf0 (w, 250@24, \cf9 "Trigger"\cf0 , \cf3 ControlSpec\cf0 (0, 1, \cf2 'lin'\cf0 , 1), \{\cf3 |ez|\cf0  a.set(\cf2 \\trigger\cf0 ,ez.value)\}, 1);\
\
startposslid= \cf3 EZSlider\cf0 (w, 250@24, \cf9 "StartPos"\cf0 , \cf3 ControlSpec\cf0 (0.0, 1.0, \cf2 'lin'\cf0 , 0.01), \{\cf3 |ez|\cf0  a.set(\cf2 \\startPos\cf0 ,ez.value)\}, 0);\
\
loopslid= \cf3 EZSlider\cf0 (w, 250@24, \cf9 "Loop"\cf0 , \cf3 ControlSpec\cf0 (0, 1, \cf2 'lin'\cf0 , 0.1), \{\cf3 |ez|\cf0  a.set(\cf2 \\loop\cf0 ,ez.value)\}, 1);\
\
w.onClose_(\{a.free;\});\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
BufRd\ul \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ulnone \
BufRd is similar to PlayBuf but lets you directly read from a buffer (note you could also use this with non-soundfiles) via a phase argument. This is more convenient for taking custom control of how you read through a sample. \
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 //this loads into a buffer the default sound that comes with SuperCollider\cf0 \
\cf8 //.read brings in the whole sound at once\cf0 \
b = \cf3 Buffer\cf0 .read(s,\cf3 Platform\cf0 .resourceDir +/+ \cf9 "sounds/a11wlk01.wav"\cf0 );\
\
\cf8 //using Mouse to scrub through- X position is normalised position 0 to 1 phase through the source file \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 (\cf9 "bufrd"\cf0 ,\{ \cf3 arg\cf0  out=0,bufnum=0;\
	\cf3 Out\cf0 .ar(out,\
		\cf3 Pan2\cf0 .ar(\cf3 BufRd\cf0 .ar(1, bufnum, \cf3 K2A\cf0 .ar(\cf3 BufFrames\cf0 .ir(b.bufnum)*\cf3 MouseX\cf0 .kr(0.0,1.0)).lag(\cf3 MouseY\cf0 .kr(0.0,1.0))),0.0)\
	)\
\}).play(s); \
)\
\
The K2A is needed to convert control rate Mouse to run at audio rate. This is because the BufRd needs to know where it is reading for every sample.\
\
.lag (which is a shortcut to get a Lag UGen) puts a smooth 'catch-up delay' (amount controlled by MouseY) on the scratching. \
\
[\cf3 \ul \ulc3 BufRd\cf0 \ulnone ] \cf8 //the help file has more examples\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
DiskIn\ul \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ulnone \
Here we only read a small part of the soundfile at a time; you would use this for streaming a large file off disk. \
\
(\
\cf8 //Prepare to stream. You can use a big file for streaming: replace the filename here with one valid for your machine. Note that dragging and dropping a file into the SC text editor posts the full path of that file as text for you to use in your code. \cf0 \
b=\cf3 Buffer\cf0 .cueSoundFile(s,\cf3 Platform\cf0 .resourceDir +/+ \cf9 "sounds/a11wlk01.wav"\cf0 ,0, 1);\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 (\cf2 \\diskin\cf0 ,\{\cf3 Out\cf0 .ar(0,\cf3 DiskIn\cf0 .ar(1, b.bufnum))\}).play(s);\
\
\
You can only playback, you can't modulate the streaming rate in any way (there is a more advanced UGen, VDiskIn, that allows some extra functionality here). But this allows you to bring in files for any processing you desire to do. \
\
[\cf3 \ul DiskIn\cf0 \ulnone ] \cf8 //help file- you will probably want to look at the 'Object messaging style' further down the page, for now. \cf0 \
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 Wavetables and oscillators\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
The implementation of most oscillator UGens is to read sample values from a \cf10 wavetable\cf0 . A short wavetable is read through again and again in a loop, at a particular rate (giving a fixed pitch). \
\
\{\cf3 SinOsc\cf0 .ar(100)\}.plot(0.05)	\cf8 //plot 5 cycles of a SinOsc sine oscillator: reads through the sine wavetable 5 times\cf0 \
\
This is similar to sampling, just with small tables which are continuously reused many times per second (as many times as the frequency). Scanning through a fixed length table at variable rates means that you sometimes fall inbetween table positions; this can be covered by interpolation, generating those inbetween values on the fly.  \
\
You can specify the waveform shape for a wavetable yourself. SuperCollider has a special efficient wavetable format to pack a buffer. \
\
\
\pard\pardeftab560\ql\qnatural
\cf0 b = \cf3 Buffer\cf0 .alloc(s, 512, 1); \cf8 //make a Buffer storage area\cf0 \
\
b.sine1(1.0/[1,2,3,4,5,6], \cf3 true\cf0 , \cf3 false\cf0 , \cf3 true\cf0 );  \cf8 //fill the Buffer with wavetable data\cf0 \
\
b.plot; \cf8 //stored shape (not in special SuperCollider Wavetable format, for clarity)\cf0 \
\
\{\cf3 OscN\cf0 .ar(b,\cf3 MouseX\cf0 .kr(10,1000),0,0.1)\}.play  \cf8 //OscN; N means non-interpolating\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 [\cf3 \ul Osc\cf0 \ulnone ]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 [\cf3 \ul OscN\cf0 \ulnone ]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
There are various other UGens that leverage buffers. You might try exploring the help files for \
\
[\cf3 \ul Index\cf0 \ulnone ]	 \cf8 //buffer as array of data for UGen\cf0 \
\
[\cf3 \ul Shaper\cf0 \ulnone ] \cf8 //buffer for wave shaping distortion/complex sound generation\cf0 \
\
[\cf3 \ul FFT\cf0 \ulnone ]		 \cf8 //buffer as complex Fourier data, gets passed through the phase vocoder processing chain\cf0 \
\
Note that Shaper and FFT will re-appear in future weeks for effects and spectral analysis discussions. \
\
You'll probably see some other ways of using the Buffer class to set or get information in server side Buffers from the language. \
\
(Sometimes communication with buffers uses the messaging style: the exhaustive list is here: [\ul Server-Command-Reference\ulnone ] and is a more advanced topic. Just be forewarned that some help file examples might show some explicit message passing to handle buffers)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}