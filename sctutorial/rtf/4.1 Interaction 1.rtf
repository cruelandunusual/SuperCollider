{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red0\green112\blue0;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf0 Interaction via Mouse and Keyboard\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 Let's return to the localhost Server now:\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Server\cf0 .default=s=\cf3 Server\cf0 .local;\
s.boot;\
)\cf2 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 MouseX/Y\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 Using the mouse as a controller is a quick and easy way of interacting with a patch\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 MouseX\cf0 .kr(leftscreenval, rightscreenval, warp, lag)\
\cf3 \
MouseY\cf0 .kr(topscreenval, bottomscreenval, warp, lag)\
\
warp can be \cf4 \\linear\cf0  or \cf4 \\exponential\cf0  \
\
lag is a smoothing factor to avoid sudden jumps in value if you move the mouse really quickly across the screen\
	\
Compare these hearing tests (be careful, they're piercing)\
\
\{\cf3 SinOsc\cf0 .ar(\cf3 MouseX\cf0 .kr(20,20000, \cf5 'linear'\cf0 ),0,0.1)\}.play\
\
and\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\{\cf3 SinOsc\cf0 .ar(\cf3 MouseY\cf0 .kr(20,20000, \cf5 'exponential'\cf0 ),0,0.1)\}.play\
\
The exponential mapping is far more comforting as a proportion of screen space than the linear one!\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Since it crops up a lot in SuperCollider, let's illustrate linear and exponential mappings as mathematical functions. \
\
100 points are plotted (try (0..99) in isolation if you're not sure what that part of the code does). The original points have been remapped, first with a linear mapping (via linlin, transforming a linear input range to a linear output range) and secondly via an exponential (via linexp for linear to exponential) \
\
(0..99).linlin(0,100,10,1000).plot2\
\
(0..99).linexp(0,100,10,1000).plot2\
\
We'll see more of this with GUIs in the use of ControlSpec objects. By the way, there are also UGen equivalents for these language side mapping functions: \
\
linlin language side = LinLin server side\
linexp language side = LinExp server side\
\
(You'll also see shortcuts used on UGens like: range (for linear) and exprange (for linear to exponential), and there are explin and expexp too)\
\
For those curious, the mappings as mathematics are: \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //to convert number input x in range [a, b] to output y in [c,d]\cf0 \
\
y  = ((x-a)/(b-a))*(d-c) + c \cf2 //linear\cf0 \
\
y = c*((d/c)**((x-a)/(b-a))) \cf2 //exponential (power operator is **) note that c can't be zero\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
If you'd like to restrict a controller to a discrete range, you can use the Index UGen\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Index\cf0 .kr(array, indexing signal)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //the indexing signal is clipped to keep it in range; it points to an array of data in the first input. Note that an array can't be used directly in this slot (because it would confuse multi-channel expansion) so a Buffer of data is used via the LocalBuf UGen\
\
//there are three distinct states\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  vals;\
\
vals= [100,200,300]; \cf2 //change me and the code should adapt\cf0 \
\
\{\cf3 SinOsc\cf0 .ar(\cf3 Index\cf0 .ar(\cf3 LocalBuf\cf0 .newFrom(vals), \cf3 MouseX\cf0 .kr(0, vals.size-0.001)))*0.2\}.play\
)															\cf2 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  vals;\
\cf3 var\cf0  numharm,basefreq;\
\
numharm=11; 	\cf2 //number of harmonics\cf0 \
basefreq=66;	\cf2 //base frequency of series\cf0 \
\
s=\cf3 Server\cf0 .local;\
\
vals= basefreq*(\cf3 Array\cf0 .series(numharm,1,1));\
\
\{\cf3 SinOsc\cf0 .ar(\cf3 Index\cf0 .kr(LocalBuf.newFrom(vals),\cf3 MouseX\cf0 .kr(0,numharm-0.001)),0,0.1)\}.play\
\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 The Mouse might also be used as a trigger\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  trig,mx;\
mx=\cf3 MouseX\cf0 .kr(0.0,1.0);\
trig= mx>0.5;			\cf2 //this is a UGen which compares mx to the constant signal 0.5 at krate\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SinOsc\cf0 .ar(440,0,0.1*trig)\
\}.play;\
)\
\
(	\cf2 //trigger in a given region\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  trig,mx,my;\
mx=\cf3 MouseX\cf0 .kr(0.0,1.0);\
my=\cf3 MouseY\cf0 .kr(0.0,1.0);\
trig= if((mx>0.3) * (mx<0.5) * (my>0.3) * (my<0.7),1,0); \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //if is a UGen here, * is equivalent to logical AND\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SinOsc\cf0 .ar(440,0,0.1*trig)\
\}.play;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 To show a more involved example of the principle, here's one of my favourite \
SuperCollider example patches (by James McCartney):\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
    \cf2 // strummable guitar\
\cf0     \cf2 // use mouse to strum strings\
\cf0 \{\
	\cf3 var\cf0  pitch, mousex, out;\cf2 \
\cf0 	pitch = [ 52, 57, 62, 67, 71, 76 ];		\cf2 // e a d g b e\cf0 \
	mousex = \cf3 MouseX\cf0 .kr;\
	out = \cf3 Mix\cf0 .fill(pitch.size, \{ \cf3 arg\cf0  i;\
		\cf3 var\cf0  trigger, pluck, period, string;\
		\cf2 // place trigger points from 0.25 to 0.75\
\cf0 		trigger = \cf3 HPZ1\cf0 .kr(mousex > (0.25 + (i * 0.1))).abs;\
		pluck = \cf3 PinkNoise\cf0 .ar(\cf3 Decay\cf0 .kr(trigger, 0.05));\
		period = pitch.at(i).midicps.reciprocal;\
		string = \cf3 CombL\cf0 .ar(pluck, period, period, 4);\
		\cf3 Pan2\cf0 .ar(string, i * 0.2 - 0.5);\
	\});\
	\cf3 LPF\cf0 .ar(out, 12000);\
	\cf3 LeakDC\cf0 .ar(out);\
\}.play;\
)\cf2 \
\
\cf0 \
\
There is also a MouseButton UGen that can be used as a trigger (it usually works better to use GUIs here, see the next tutorial)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //first argument to MouseButton is the off value, second on on, when pressed button\cf0 \
\{ \cf3 SinOsc\cf0 .ar(\cf3 MouseButton\cf0 .kr(400, 440), 0, 0.1) \}.play;\
	\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ul \ulc2 \
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ulnone Keyboard\
\cf2 \
\cf0 You can also use the keyboard to trigger things.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //key code 0 = 'a' key\cf6 \
\{ \cf7 SinOsc\cf6 .ar(800, 0, \cf7 KeyState\cf6 .kr(0, 0, 0.1)) \}.play; \cf8 //Server-side \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
\
On the language side, this is usually done with GUIs which respond to certain keys, to trigger action functions (also known in computer science as callbacks, a function that gets called when a certain action is taken by the user or system). The view that responds to the key must be in focus (see the GUI tutorial). \
\
\
\
\
For SC3.5 or earlier with the Document class, you can work by setting action functions in the text documents themselves. Here is an example of a callback from the Document as you type:\
\
(\
\cf3 var\cf0  doc;\
\
\cf3 SynthDef\cf0 (\cf9 "typeofsound"\cf0 ,\{\cf3 Out\cf0 .ar(0,\cf3 Line\cf0 .kr(1,0,0.1,doneAction:2)*\cf3 VarSaw\cf0 .ar(\cf3 Rand\cf0 (100,1000),0,\cf3 Rand\cf0 (0.1,0.8),0.1))\}).add;\
\
doc = \cf3 Document\cf0 .current; \cf2 //this text window you're reading from! \cf0 \
doc.keyDownAction_(\{\cf3 arg\cf0  ...args;\
	[args[1],args[3]].postln;\
	\cf3 Synth\cf0 (\cf9 "typeofsound"\cf0 );\
\});\
)\
\
\cf2 //turn this off\cf0 \
(\
\cf3 Document\cf0 .current.keyDownAction_(\cf3 nil\cf0 );\
)\
\cf2 \
\
\
\cf0 [\cf3 Document\cf0 ] \cf2 //the Document help file has other examples of this\cf0 \
\cf2 \
\
\
\cf0 \
\
\cf2 \
\
\
\
\
\
\
}