{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green191\blue0;\red191\green0\blue0;\red0\green0\blue191;
\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;\red0\green115\blue0;
\red0\green255\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf2 Fat Chorus\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 I'll use what we've looked at to create a chorusing effect. We make an array of oscillators slightly detuned from one another, mixed to keep them in mono.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\{\cf4 Mix\cf0 (\cf4 Saw\cf0 .ar([440,443,437],0.1))\}.scope \cf3 //chorusing\cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 //more complicated sound combining AM, FM, chorusing and time-variation from Line and XLine\cf0 \
(\
\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 Mix\cf0 (\
	\cf4 Resonz\cf0 .ar(			\cf3 //The Resonz filter has arguments input, freq, rq=bandwidth/centre frequency  \cf0 \
		\cf4 Saw\cf0 .ar([440,443,437] + \cf4 SinOsc\cf0 .ar(100,0,100)), \cf3 //frequency modulated sawtooth wave with chorusing\cf0 \
		\cf4 XLine\cf0 .kr(10000,10,10), \cf3 //vary filter bandwidth over time\cf0 \
		\cf4 Line\cf0 .kr(1,0.05, 10), \cf3 //vary filter rq over time\cf0 \
		mul: \cf4 LFSaw\cf0 .kr(\cf4 Line\cf0 .kr(3,17,3),0,0.5,0.5)*\cf4 Line\cf0 .kr(1,0,10)  \cf3 //AM\cf0 \
	)\
)\
\}.scope\
)\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Sample playback rate modulation\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
modulation of sample playback by an oscillator.\
\
Soundfiles will be explained properly in a future week, though see the PlayBuf and Buffer help files if you want to look ahead. \
\
\cf3 //run me first to load the soundfiles\cf0 \
(\cf5 \
b=\cf6 Buffer\cf5 .read(s,\cf6 Platform\cf5 .resourceDir +/+ \cf7 "sounds/a11wlk01.wav"\cf5 );\
\cf8 //b.Buffer.read(s,"sounds/a11wlk01.wav"); //SC3.4 or earlier\cf5 \
\cf0 )\
\
\
\cf3 //now me!\cf0 \
(\
\
\{\
\cf4 var\cf0  modfreq, modindex, modulator;\
\
modfreq= \cf4 MouseX\cf0 .kr(1,4400, \cf9 'exponential'\cf0 );\
modindex=\cf4 MouseY\cf0 .kr(0.0,10.0,\cf9 'linear'\cf0 );\
\
modulator= \cf4 SinOsc\cf0 .kr(modfreq,0,modfreq*modindex, 440); \
\
\cf4 PlayBuf\cf0 .ar(1,b, \cf4 BufRateScale\cf0 .kr(b)* (modulator/440), 1, 0, 1)\
\
\}.scope;\
) \
 \
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf10 Return to the bell\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
We are now in a position to return to the additive bell sound and add some modulation effects to make it a richer, more vibrant sound\
\
I won't explain everything here right now, but it's the sort of thing that should become much clearer and decipherable as you gain SC experience. \
\
\
\cf3 //richer bell patch\cf0 \
(\
\cf4 var\cf0  numpartials, spectrum, amplitudes, modfreqs1, modfreqs2, decaytimes;  \
\
spectrum = [0.5,1,1.19,1.56,2,2.51,2.66,3.01,4.1];\
\
amplitudes= [0.25,1,0.8,0.5,0.9,0.4,0.3,0.6,0.1];\
\
numpartials = spectrum.size;\
\
modfreqs1 = \cf4 Array\cf0 .rand(numpartials, 1, 5.0); \cf3 //vibrato rates from 1 to 5 Hz \cf0 \
\
modfreqs2 = \cf4 Array\cf0 .rand(numpartials, 0.1, 3.0); \cf3 //tremolo rates from 0.1 to 3 Hz \cf0 \
\
decaytimes = \cf4 Array\cf0 .fill(numpartials,\{|i|  rrand(2.5,2.5+(5*(1.0-(i/numpartials))))\}); \cf3 //decay from 2.5 to 7.5 seconds, lower partials longer decay\cf0 \
\
\{\
\cf4 Mix\cf0 .fill(spectrum.size, \{\cf4 arg\cf0  i;  \
\cf4 	var\cf0  amp, freq; \
	\
	freq= (spectrum[i]+(\cf4 SinOsc\cf0 .kr(modfreqs1[i],0,0.005)))*500; \
	amp= 0.1* \cf4 Line\cf0 .kr(1,0,decaytimes[i])*(\cf4 SinOsc\cf0 .ar(modfreqs2[i],0,0.1,0.9)* amplitudes[i]);\
	\
	\cf4 Pan2\cf0 .ar(\cf4 SinOsc\cf0 .ar(freq, 0, amp),1.0.rand2)\});\
\}.scope\
\
)\
\
\
\
\
\
\
\
\
\
\
\
\
}