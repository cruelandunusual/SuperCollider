{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf2 //Quick network music introduction (adapted from code by Julian Rohrhuber)\cf0 \
\
\cf2 //This sets up connections to the various IP addresses around the network: you will need to update this code to reflect your local setup\cf0 \
\
\cf2 //We will need to collect IPs of the computers in the Lab \cf0 \
\
\
(\
a = [190, 30, 198, 200,196, 227].collect(\{ \cf3 arg\cf0  el;\
	\cf3 Server\cf0 (\cf4 "test"\cf0 ++el, \cf3 NetAddr\cf0 (\cf4 "139.184.50."\cf0  ++ el, 57110))\
\});\
)\
\
(\
\
a = ["10.0.10.25","10.0.9.172",""].collect(\{ \cf3 arg\cf0  ip,i;\
	\cf3 Server\cf0 (\cf4 "test"\cf0 ++i, \cf3 NetAddr\cf0 (\cf4 ip\cf0 , 57110))\
\});\
)\
\
\
\cf2 //makes a Server GUI that represents a particular network target\cf0 \
a[0].makeWindow;\
\
\cf2 //function to encapsulate sending a SynthDef to all Servers \cf0 \
f = \{ \cf3 arg\cf0  synthDef; a.do(\{ \cf3 arg\cf0  el; synthDef.send(el) \}) \};\
\
\cf2 //send to a specific Server\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 (\cf4 "finesine"\cf0 , \{ \cf3 arg\cf0  out, freq=440, amp=0.1, pan, sustain=0.01, x=0.5;\
		\cf3 var\cf0  e, u;\
		e = \cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 .perc(0.001, sustain, amp), doneAction:2);\
		u = \cf3 SinOsc\cf0 .ar(freq * [1.0, 5/6, 17/8] * \cf3 XLine\cf0 .ar(1 + x, 1, sustain)).sum * amp;\
		\cf3 Out\cf0 .ar(out, u)\
\}).send(a[0]);\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //use function f to send to all\cf0 \
(\
f.value(\
	\cf3 SynthDef\cf0 (\cf4 "finesine"\cf0 , \{ \cf3 arg\cf0  out, freq=440, amp=0.1, pan, sustain=0.01, x=0.5;\
		\cf3 var\cf0  e, u;\
		e = \cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 .perc(0.001, sustain, amp), doneAction:2);\
		u = \cf3 SinOsc\cf0 .ar(freq * [1.0, 5/6, 17/8] * \cf3 XLine\cf0 .ar(1 + x, 1, sustain)).sum * amp;\
		\cf3 Out\cf0 .ar(out, u)\
	\})\
)\
)\
\
\cf2 //automate Synth grain firing once around the Servers in random order\cf0 \
(\
\{\
	10.do \{ \cf3 arg\cf0  el, i;\
		\cf3 Synth\cf0 .grain(\cf5 \\finesine\cf0 , [\cf5 \\freq\cf0 , 1000 +(i*200)], a.choose);\
		0.1.wait;\
		\}\
\}.fork;\
)\
\
\cf2 //Using a pattern to target particular Servers in the array a\cf0 \
(\
\{\
	\cf3 var\cf0  pat;\
	pat = \cf3 Pseq\cf0 ([0,1,2,3,2,1,4,5]);\
	pat.asStream.do \{\'a0\cf3 arg\cf0  serverIndex, i;\
		\cf3 Synth\cf0 .grain(\cf5 \\finesine\cf0 , [\cf5 \\freq\cf0 , rrand(500,2000)], a[serverIndex]);\
		0.1.wait;\
	\}\
\}.fork;\
)\
\
\
\
\
\
\
\
\
}