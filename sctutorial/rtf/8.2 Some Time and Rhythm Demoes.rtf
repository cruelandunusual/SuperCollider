{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs36 \cf2 //Demoes on the perception of rhythm\cf0 \
\
\
\cf2 //s.bind and OffsetOut will be used in these demoes to get accurate timing of events; see the 'Precise Timing in SC' tutorial\cf0 \
\
\cf3 SynthDef\cf0 (\cf4 \\beep\cf0 ,\{\cf3 arg\cf0  freq=440,amp=0.1, pan=0.0, dur=0.1; \cf3 OffsetOut\cf0 .ar(0,\cf3 Pan2\cf0 .ar(\cf3 SinOsc\cf0 .ar(freq,0,amp)*\cf3 Line\cf0 .kr(1,0,dur, doneAction:2),pan))\}).add\
\
\cf2 //test \cf0 \
\cf3 Synth\cf0 (\cf4 \\beep\cf0 ,[\cf4 \\freq\cf0 , 440, \cf4 \\amp\cf0 ,1])\
\
\
\
Example of timing sensitivity in spatialization\
\cf2 \
//An event is sent at equal volume to both ears but arrives at the right ear 1 millisecond ahead of the left. You will hear it coming from the right\cf0 \
\cf2 //(demo works best over headphones)\cf0 \
(\
\{\
\
s.bind\{\cf3 Synth\cf0 (\cf4 \\beep\cf0 ,[\cf4 \\freq\cf0 , 440,\cf4 \\amp\cf0 ,0.1,\cf4 \\pan\cf0 ,1])\};\
\
0.001.wait;\
\
s.bind\{\cf3 Synth\cf0 (\cf4 \\beep\cf0 ,[\cf4 \\freq\cf0 , 440,\cf4 \\amp\cf0 ,0.1,\cf4 \\pan\cf0 ,-1])\};\
\
\}.fork\
)\
\
\
\cf2 //which came first? 30 msec difference between two tones (try different values)\cf0 \
(\
\{\
	\
s.bind\{\cf3 Synth\cf0 (\cf4 \\beep\cf0 ,[\cf4 \\freq\cf0 ,440,\cf4 \\amp\cf0 ,0.1,\cf4 \\pan\cf0 ,0,\\dur,0.1+0.03])\};\
\
0.03.wait;\
\
s.bind\{\cf3 Synth\cf0 (\cf4 \\beep\cf0 ,[\cf4 \\freq\cf0 ,560,\cf4 \\amp\cf0 ,0.1,\cf4 \\pan\cf0 ,0,\\dur,0.1])\};\
\
\}.fork\
)\
\
\
\
\
\cf2 //how many events in these tuplets? (you may need to get someone else to test you, or add a randomising function like rrand(3,9) ) \cf0 \
(\
\cf3 var\cf0  n, delay;\
\
n=4; \cf2 //start increasing by 1\cf0 \
\
delay=0.4/n;\
\
\{\
\
	n.do \{\
	s.bind\{\cf3 Synth\cf0 (\cf4 \\beep\cf0 ,[\cf4 \\freq\cf0 , 440,\cf4 \\amp\cf0 ,0.1,\cf4 \\pan\cf0 ,0])\};\
\
	delay.wait;\
	\}\
\
\}.fork\
)\
\
\
\
\
\cf2 //how many duration categories?\cf0 \
(\
\cf3 var\cf0  categories, n;\
\
n=7;\
\
categories=[0.25,0.33,0.4,0.5,0.6,0.67,0.75,0.8,1,1.25,1.5,1.75];\
\
n = min(n,categories.size);\
\
\{\
\
	\cf3 inf\cf0 .do \{\
	\
	s.bind\{\cf3 Synth\cf0 (\cf4 \\beep\cf0 ,[\cf4 \\freq\cf0 , 440,\cf4 \\amp\cf0 ,0.1,\cf4 \\pan\cf0 ,0])\};\
\
	(categories.wrapAt(n.rand)).wait;\
	\}\
\
\}.fork\
)\
\
\
\
\
\cf2 //limits of tempo\cf0 \
(\
\cf3 var\cf0  tempo;\
\
tempo=0.5; \cf2 //bps 0.5 (2 second period), 4 (0.25 second period)\cf0 \
\
\{\
	\cf3 inf\cf0 .do \{	\
		s.bind\{\cf3 Synth\cf0 (\cf4 \\beep\cf0 ,[\cf4 \\freq\cf0 , 440,\cf4 \\amp\cf0 ,0.1,\cf4 \\pan\cf0 ,0])\};\
		1.wait;\
	\}\
\}.fork(\cf3 TempoClock\cf0 (tempo))\
)\
\
\
\
\
\
\
\
\
\cf2 //tempo discrimination test\cf0 \
\
t = TempoClock(2); \
\
(\
\{\
	\cf3 inf\cf0 .do \{\
		s.bind\{\cf3 Synth\cf0 (\cf4 \\beep\cf0 ,[\cf4 \\freq\cf0 , 440,\cf4 \\amp\cf0 ,0.1,\cf4 \\pan\cf0 ,0])\};\
		1.wait;\
	\}\
\}.fork(t)\
)\
\
t.tempo= 2*(1.01);\cf2  //try different values like 1.01, 1.04, 1.1 for the multiplier in brackets\cf0 \
\
\
\
\
\
\
\
\
\cf2 //swing\cf0 \
\
w = 0.1; \cf2 //variable to hold amount of swing in seconds\cf0 \
\
(\
\{\
	\cf3 inf\cf0 .do \{\cf3 |i|\cf0 \
		s.bind\{\cf3 Synth\cf0 (\cf4 \\beep\cf0 ,[\cf4 \\freq\cf0 , 440,\cf4 \\amp\cf0 ,0.1,\cf4 \\pan\cf0 ,0])\};\
		([1,-1]@@(i)*w + 0.25).wait; \cf2 //@@ is wrapAt\cf0 \
	\}\
\}.fork(\cf3 TempoClock\cf0 (2))\
)\
\
w = 0.08; \cf2 //try 0.0, 0.2\cf0 \
\
\cf5 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cf6 //metric modulation \cf5 \
\cf6 //quintuplets become new pulsation level as tempo increases by 5/4\cf5 \
( \
\cf7 var\cf5  clock = \cf7 TempoClock\cf5 (1);  \
 \
\{ \
	 \
	 \
	5.do\{\cf7 |i|\cf5  \
		\
		(\cf8 "iteration"\cf5 +i).postln; \
		 \
		\{ \
			 \
			\cf6 //pulse beats \cf5 \
			8.do\{ \
				\cf7 Synth\cf5 (\cf9 \\beep\cf5 ,[\cf9 \\freq\cf5 , 100, \cf9 \\amp\cf5 ,0.5]); \
				\
				1.0.wait;\
			\}; \
				 \
		\}.fork(clock);  \
		 \
		 \
		\{ \
			 \
			(4*6).do\{ \
				\cf7 Synth\cf5 (\cf9 \\beep\cf5 ,[\cf9 \\freq\cf5 , 100, \cf9 \\amp\cf5 ,0.5]); \
				 \
				0.25.wait; \
			\}; \
			 \
			(5*2).do\{ \
				\cf7 Synth\cf5 (\cf9 \\beep\cf5 ,[\cf9 \\freq\cf5 , 100, \cf9 \\amp\cf5 ,0.5]); \
				 \
				0.2.wait; \
			\}; \
			 \
				 \
		\}.fork(clock);  \
		 \
		8.wait;  \
		 \
		clock.tempo = clock.tempo*(5/4);  \
		 \
	\}; \
	 \
\}.fork(clock);  \
 \
)\
\
\
\
\
}